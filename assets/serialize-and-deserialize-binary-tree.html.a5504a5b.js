import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";import{r as t,c as r,a as n,b as s,w as o,F as p,d as e,e as u,o as d}from"./app.22a70bca.js";const m={},k=n("h1",{id:"serialize-and-deserialize-binary-tree",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#serialize-and-deserialize-binary-tree","aria-hidden":"true"},"#"),e(" serialize and deserialize binary tree")],-1),b=n("h2",{id:"question",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#question","aria-hidden":"true"},"#"),e(" Question")],-1),h=e("Can you transform(serialize) a binary tree into a string and restore(deserialize) a binary tree from the string? Just like what "),v={href:"https://bigfrontend.dev/problem/implement-JSON-stringify",target:"_blank",rel:"noopener noreferrer"},_=e("JSON.stringify()"),f=e(" and "),g={href:"https://bigfrontend.dev/problem/implement-JSON-parse",target:"_blank",rel:"noopener noreferrer"},y=e("JSON.parse()"),z=e(" do."),w=e("For example, for a tree from "),x={href:"https://bigfrontend.dev/problem/invert-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},N=e("91. invert a binary tree"),B=u(`<p><img src="https://cdn.bfe.dev/bfe/img/5HqzC2BPLAY1oao78DrYhs9wXTV4msLP_1169x546_1598270209815.png" alt="" loading="lazy"></p><p>BFE.dev would serialize it to <code>[1,2,3,4,null,null,5,6,7,8,null,null,null,null,9]</code></p><p>But there are more ways of doing it rather than above, any would be fine as long as your <code>deserialize()</code> and <code>serialize()</code> work as a pair.</p><p>Your code is tested like this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
<span class="token keyword">const</span> tree1 <span class="token operator">=</span> <span class="token operator">...</span>
<span class="token function">expect</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">serialize</span><span class="token punctuation">(</span>tree1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> tree2 <span class="token operator">=</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span>tree1<span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isIdentical</span><span class="token punctuation">(</span>tree1<span class="token punctuation">,</span> tree2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Binary tree in this problem consists of value of integers.</p><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,7),C=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// This is the class for the node"),e(`
`),n("span",{class:"token comment"},"// you can use this directly as it is bundled with your code"),e(`

`),n("span",{class:"token comment"},"// class Node {"),e(`
`),n("span",{class:"token comment"},"//   value: number"),e(`
`),n("span",{class:"token comment"},"//   left: null | Node"),e(`
`),n("span",{class:"token comment"},"//   right: null | Node"),e(`
`),n("span",{class:"token comment"},"//   constructor(val) {"),e(`
`),n("span",{class:"token comment"},"//     this.value = val"),e(`
`),n("span",{class:"token comment"},"//     this.left = null"),e(`
`),n("span",{class:"token comment"},"//     this.right = null"),e(`
`),n("span",{class:"token comment"},"//   }"),e(`
`),n("span",{class:"token comment"},"// }"),e(`

`),n("span",{class:"token doc-comment comment"},[e(`/**
 * `),n("span",{class:"token keyword"},"@param"),e(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),e("Node"),n("span",{class:"token punctuation"},"}")]),e(),n("span",{class:"token parameter"},"root"),e(`
 * `),n("span",{class:"token keyword"},"@return"),e(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),e("string"),n("span",{class:"token punctuation"},"}")]),e(`
 */`)]),e(`
`),n("span",{class:"token keyword"},"function"),e(),n("span",{class:"token function"},"serialize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
  `),n("span",{class:"token comment"},"// your code here"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`

`),n("span",{class:"token doc-comment comment"},[e(`/**
 * `),n("span",{class:"token keyword"},"@param"),e(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),e("string"),n("span",{class:"token punctuation"},"}")]),e(),n("span",{class:"token parameter"},"str"),e(`
 * `),n("span",{class:"token keyword"},"@return"),e(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),e("Node"),n("span",{class:"token punctuation"},"}")]),e(`
 */`)]),e(`
`),n("span",{class:"token keyword"},"function"),e(),n("span",{class:"token function"},"deserialize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"str"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
  `),n("span",{class:"token comment"},"// your code here"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("h2",{id:"source",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#source","aria-hidden":"true"},"#"),e(" Source")],-1),S={href:"https://bigfrontend.dev/problem/serialize-and-deserialize-binary-tree",target:"_blank",rel:"noopener noreferrer"},F=e("Source From");function I(J,V){const a=t("ExternalLinkIcon"),i=t("CodeGroupItem"),c=t("CodeGroup");return d(),r(p,null,[k,b,n("p",null,[h,n("a",v,[_,s(a)]),f,n("a",g,[y,s(a)]),z]),n("p",null,[w,n("a",x,[N,s(a)])]),B,s(c,null,{default:o(()=>[s(i,{title:"javascript",active:""},{default:o(()=>[C]),_:1})]),_:1}),j,n("p",null,[n("a",S,[F,s(a)])])],64)}var L=l(m,[["render",I],["__file","serialize-and-deserialize-binary-tree.html.vue"]]);export{L as default};
