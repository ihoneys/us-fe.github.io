import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";import{r as s,c as r,b as e,w as t,a as n,F as u,e as o,d as a,o as d}from"./app.22a70bca.js";const k={},h=o(`<h1 id="get-dom-tree-height" tabindex="-1"><a class="header-anchor" href="#get-dom-tree-height" aria-hidden="true">#</a> get DOM tree height</h1><h2 id="question" tabindex="-1"><a class="header-anchor" href="#question" aria-hidden="true">#</a> Question</h2><p>Height of a tree is the maximum depth from root node. Empty root node have a height of 0.</p><p>If given DOM tree, can you create a function to get the height of it?</p><p>For the DOM tree below, we have a height of 4.</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Can you solve this both recursively and iteratively?</p><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,8),g=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[a(`/**
 * `),n("span",{class:"token keyword"},"@param"),a(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),a("HTMLElement "),n("span",{class:"token operator"},"|"),a(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},"}")]),a(),n("span",{class:"token parameter"},"tree"),a(`
 * `),n("span",{class:"token keyword"},"@return"),a(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),a("number"),n("span",{class:"token punctuation"},"}")]),a(`
 */`)]),a(`
`),n("span",{class:"token keyword"},"function"),a(),n("span",{class:"token function"},"getHeight"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"tree"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token comment"},"// your code here         "),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),m=o('<h2 id="related" tabindex="-1"><a class="header-anchor" href="#related" aria-hidden="true">#</a> Related</h2><ul><li><a href="./find-corresponding-node-in-two-identical-DOM-tree">find corresponding node in two identical DOM tree</a></li></ul><h2 id="source" tabindex="-1"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2>',3),v={href:"https://bigfrontend.dev/problem/get-DOM-tree-height",target:"_blank",rel:"noopener noreferrer"},b=a("Source From");function _(f,x){const c=s("CodeGroupItem"),p=s("CodeGroup"),l=s("ExternalLinkIcon");return d(),r(u,null,[h,e(p,null,{default:t(()=>[e(c,{title:"javascript",active:""},{default:t(()=>[g]),_:1})]),_:1}),m,n("p",null,[n("a",v,[b,e(l)])])],64)}var C=i(k,[["render",_],["__file","get-dom-tree-height.html.vue"]]);export{C as default};
