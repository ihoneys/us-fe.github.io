import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";import{r as t,c as l,a as n,b as e,w as o,F as u,d as s,e as c,o as d}from"./app.22a70bca.js";const k={},m=n("h1",{id:"create-a-tokenizer",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#create-a-tokenizer","aria-hidden":"true"},"#"),s(" create a tokenizer")],-1),v=n("h2",{id:"question",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#question","aria-hidden":"true"},"#"),s(" Question")],-1),h=s("Given a character sequence and a defined document unit, tokenization is the task of chopping it up into pieces, called tokens , perhaps at the same time throwing away certain characters, such as punctuation. ("),g={href:"https://nlp.stanford.edu/IR-book/html/htmledition/tokenization-1.html",target:"_blank",rel:"noopener noreferrer"},_=s("ref"),b=s(")"),f=c(`<p>For tasks of string processing, in many cases we are given a string, and are asked to understand this string in specific logic and then return the result.</p><p>For example, if we are to calculate the result of following expression:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token number">1</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">-</span>   <span class="token number">300</span>      <span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>before we implement the logic, first we need to get the &quot;keywords&quot;(tokens) and ignore the spaces, like following:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;20&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;300&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;)&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Then we can process above tokens and get the result easier.</p><p><strong>You are asked to implement a tokenize() for arithmetic expression</strong> , which works as below:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> tokens <span class="token operator">=</span> <span class="token function">tokenize</span><span class="token punctuation">(</span><span class="token string">&#39; 1 * (20 -   300      ) &#39;</span><span class="token punctuation">)</span>


<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> token <span class="token operator">=</span> tokens<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">break</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>or you can use <code>for ... of</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> token <span class="token keyword">of</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Because it is trivial, in a real interview you talk to interviewer and implement tokenizer later, this could save yourself some time for more important tasks.</p><p><strong>Input</strong></p>`,12),w=c("<li><p>input only contains valid non-negative integers with <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>(</code>, <code>)</code> and spaces, space should be ignored.</p></li>",1),x=s("your method should return an "),y={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",target:"_blank",rel:"noopener noreferrer"},j=s("Generator"),z=s(" object."),G=n("h2",{id:"code",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#code","aria-hidden":"true"},"#"),s(" Code")],-1),C=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("string"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"str"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("Generator"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"function"),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token function"},"tokenize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"str"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// your code here"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=n("h2",{id:"source",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#source","aria-hidden":"true"},"#"),s(" Source")],-1),I={href:"https://bigfrontend.dev/problem/create-a-tokenizer",target:"_blank",rel:"noopener noreferrer"},F=s("Source From");function S(B,N){const a=t("ExternalLinkIcon"),i=t("CodeGroupItem"),p=t("CodeGroup");return d(),l(u,null,[m,v,n("blockquote",null,[n("p",null,[h,n("a",g,[_,e(a)]),b])]),f,n("ol",null,[w,n("li",null,[n("p",null,[x,n("a",y,[j,e(a)]),z])])]),G,e(p,null,{default:o(()=>[e(i,{title:"javascript",active:""},{default:o(()=>[C]),_:1})]),_:1}),q,n("p",null,[n("a",I,[F,e(a)])])],64)}var T=r(k,[["render",S],["__file","create-a-tokenizer.html.vue"]]);export{T as default};
