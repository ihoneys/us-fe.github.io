import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";import{r as a,c as l,b as s,w as t,a as e,F as d,e as u,d as n,o as p}from"./app.22a70bca.js";const m={},h=u('<h1 id="validate-number-string" tabindex="-1"><a class="header-anchor" href="#validate-number-string" aria-hidden="true">#</a> validate number string</h1><h2 id="question" tabindex="-1"><a class="header-anchor" href="#question" aria-hidden="true">#</a> Question</h2><p>Give a number string, check if it is valid number.</p><p>By &quot;valid&quot;, we mean if it validates as one of below formats:</p><ol><li>integer, such as <code>&#39;0&#39;</code>, <code>&#39;-1&#39;</code></li><li>decimal number like <code>&#39;1.0&#39;</code>, <code>&#39;-2.335&#39;</code></li><li>exponential notation <code>-12.3e45</code></li></ol><p>Formats such as <code>BigInt</code>, <code>Infinity</code>, <code>NaN</code>, octal and hexadecimal .etc are out of scope, you can treat them as invalid.</p><p>Pay attention to the sign <code>+</code> <code>-</code>.</p><h2 id="note" tabindex="-1"><a class="header-anchor" href="#note" aria-hidden="true">#</a> Note</h2><p>The test cases are not covering all the possible cases, since this is not a problem to test your knowledge against JavaScript language spec.</p><p>You should confirm with your interviewer about the scope and those edge cases.</p><p><code>isNaN()</code> seems to be a nice trick, but could you solve without it?</p><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>',12),b=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token doc-comment comment"},[n(`/**
 * `),e("span",{class:"token keyword"},"@param"),n(),e("span",{class:"token class-name"},[e("span",{class:"token punctuation"},"{"),n("string"),e("span",{class:"token punctuation"},"}")]),n(),e("span",{class:"token parameter"},"str"),n(`
 * `),e("span",{class:"token keyword"},"@returns"),n(),e("span",{class:"token class-name"},[e("span",{class:"token punctuation"},"{"),n("boolean"),e("span",{class:"token punctuation"},"}")]),n(`
 */`)]),n(`
`),e("span",{class:"token keyword"},"function"),n(),e("span",{class:"token function"},"validateNumberString"),e("span",{class:"token punctuation"},"("),e("span",{class:"token parameter"},"str"),e("span",{class:"token punctuation"},")"),n(),e("span",{class:"token punctuation"},"{"),n(`
  `),e("span",{class:"token comment"},"// your code here"),n(`
`),e("span",{class:"token punctuation"},"}"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),k=e("pre",null,[e("code",null,`::: code-group-item typescript
`)],-1),v=e("div",{class:"language-typescript ext-ts line-numbers-mode"},[e("pre",{class:"language-typescript"},[e("code",null,[e("span",{class:"token keyword"},"function"),n(),e("span",{class:"token function"},"validateNumberString"),e("span",{class:"token punctuation"},"("),n("str"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token builtin"},"string"),e("span",{class:"token punctuation"},")"),e("span",{class:"token operator"},":"),n(),e("span",{class:"token builtin"},"boolean"),n(),e("span",{class:"token punctuation"},"{"),n(`
  `),e("span",{class:"token comment"},"// your code here"),n(`
`),e("span",{class:"token punctuation"},"}"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),_=e("p",null,":::",-1),g=e("h2",{id:"source",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#source","aria-hidden":"true"},"#"),n(" Source")],-1),f={href:"https://bigfrontend.dev/problem/validate-number-string-1",target:"_blank",rel:"noopener noreferrer"},x=n("Source From");function y(w,N){const o=a("CodeGroupItem"),c=a("CodeGroup"),i=a("ExternalLinkIcon");return p(),l(d,null,[h,s(c,null,{default:t(()=>[s(o,{title:"javascript",active:""},{default:t(()=>[b]),_:1}),k,v,_]),_:1}),g,e("p",null,[e("a",f,[x,s(i)])])],64)}var I=r(m,[["render",y],["__file","validate-number-string-1.html.vue"]]);export{I as default};
