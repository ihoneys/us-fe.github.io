import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";import{r as e,c as l,a as n,b as a,w as o,F as u,d as s,e as c,o as d}from"./app.22a70bca.js";const k={},b=n("h1",{id:"generate-fibonacci-number-with-recursion",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#generate-fibonacci-number-with-recursion","aria-hidden":"true"},"#"),s(" Generate Fibonacci Number with recursion")],-1),m=n("h2",{id:"question",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#question","aria-hidden":"true"},"#"),s(" Question")],-1),h=s("In "),f={href:"https://bigfrontend.dev/problem/fibonacci-number",target:"_blank",rel:"noopener noreferrer"},_=s("86. Generate Fibonacci Number"),v=s(" you are asked to create a "),w=n("code",null,"fib(n)",-1),g=s("."),y=c(`<p>This could be simply done by a recursion, but it costs so much time that your browser freezes, don&#39;t try it with large numbers.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fib</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>
  <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 55</span>
<span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// timeout</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Can you improve above implementation to make it work for <code>fib(1000)</code> ? recursion should still be used.</p><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,4),x=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// please modify code below to make it work for large number like `fib(1000)`"),s(`
`),n("span",{class:"token comment"},"// recursion should still be used"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"fib"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"n"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("n "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("n "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"1"),s(`
  `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"fib"),n("span",{class:"token punctuation"},"("),s("n "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token function"},"fib"),n("span",{class:"token punctuation"},"("),s("n "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=c('<h2 id="related" tabindex="-1"><a class="header-anchor" href="#related" aria-hidden="true">#</a> Related</h2><ul><li><a href="./fibonacci-number">Generate Fibonacci Number</a></li></ul><h2 id="source" tabindex="-1"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2>',3),C={href:"https://bigfrontend.dev/problem/Generate-Fibonacci-Number-with-recursion",target:"_blank",rel:"noopener noreferrer"},F=s("Source From");function G(j,I){const t=e("ExternalLinkIcon"),r=e("CodeGroupItem"),i=e("CodeGroup");return d(),l(u,null,[b,m,n("p",null,[h,n("a",f,[_,a(t)]),v,w,g]),y,a(i,null,{default:o(()=>[a(r,{title:"javascript",active:""},{default:o(()=>[x]),_:1})]),_:1}),N,n("p",null,[n("a",C,[F,a(t)])])],64)}var E=p(k,[["render",G],["__file","generate-fibonacci-number-with-recursion.html.vue"]]);export{E as default};
