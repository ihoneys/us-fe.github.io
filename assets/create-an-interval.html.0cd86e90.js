import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";import{r as a,c as i,b as e,w as t,a as n,F as u,e as r,d as s,o as k}from"./app.22a70bca.js";const d={},m=r(`<h1 id="create-an-interval" tabindex="-1"><a class="header-anchor" href="#create-an-interval" aria-hidden="true">#</a> create an interval</h1><h2 id="question" tabindex="-1"><a class="header-anchor" href="#question" aria-hidden="true">#</a> Question</h2><p>You are asked to create a new <code>mySetInterval(a, b)</code> which has a different behavior from <code>window.setInterval</code>, the time between calls is a linear function, growing larger and larger <code>period = a + b * count</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> prev <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;roughly &#39;</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> prev<span class="token punctuation">)</span>
  prev <span class="token operator">=</span> now
<span class="token punctuation">}</span>

<span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">mySetInterval</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>

<span class="token comment">// roughly 100, 100 + 200 * 0</span>
<span class="token comment">// roughly 400,  100 + 200 * 1</span>
<span class="token comment">// roughly 900,  100 + 200 * 2</span>
<span class="token comment">// roughly 1600,  100 + 200 * 3</span>
<span class="token comment">// ....</span>

<span class="token function">myClearInterval</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token comment">// stop the interval</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>Interface is <code>mySetInterval(delay, period)</code>, the first <code>delay</code> is used for the first call, and then <code>period</code> is used.</p></li><li><p>because <code>window.setTimeout</code> and <code>window.setInterval</code> are not accurate in browser environment, they are replaced to other implementation when judging your code. They still have the same interface, and internally keep track of the timing for testing purpose.</p></li></ol><p>Something like below will be used to do the test. (You don&#39;t need to read following code to accomplish this task)</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> currentTime <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">const</span> <span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">delay<span class="token punctuation">,</span> period<span class="token punctuation">,</span> clearAt</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  currentTime <span class="token operator">=</span> <span class="token number">0</span>
  pipeline<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>
  
  <span class="token keyword">const</span> logs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    logs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">mySetInterval</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> period<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>clearAt <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">myClearInterval</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> clearAt<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> calls<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>time<span class="token punctuation">,</span> callback<span class="token punctuation">]</span> <span class="token operator">=</span> pipeline<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    currentTime <span class="token operator">=</span> time
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> calls
<span class="token punctuation">}</span>

<span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">900</span><span class="token punctuation">,</span><span class="token number">1600</span><span class="token punctuation">,</span><span class="token number">2500</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">450</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,8),v=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("Function"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"func"),s(`
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"delay"),s(`
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"period"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"mySetInterval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("func"),n("span",{class:"token punctuation"},","),s(" delay"),n("span",{class:"token punctuation"},","),s(" period")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// your code here"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s(" number "),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"id"),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"myClearInterval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"id"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=n("h2",{id:"source",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#source","aria-hidden":"true"},"#"),s(" Source")],-1),f={href:"https://bigfrontend.dev/problem/create-an-interval",target:"_blank",rel:"noopener noreferrer"},h=s("Source From");function y(w,g){const p=a("CodeGroupItem"),o=a("CodeGroup"),c=a("ExternalLinkIcon");return k(),i(u,null,[m,e(o,null,{default:t(()=>[e(p,{title:"javascript",active:""},{default:t(()=>[v]),_:1})]),_:1}),b,n("p",null,[n("a",f,[h,e(c)])])],64)}var I=l(d,[["render",y],["__file","create-an-interval.html.vue"]]);export{I as default};
