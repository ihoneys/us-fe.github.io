import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";import{r as e,c as r,a as n,b as a,w as o,F as u,e as c,d as s,o as d}from"./app.22a70bca.js";const k={},m=c(`<h1 id="create-callback-on-message-channel" tabindex="-1"><a class="header-anchor" href="#create-callback-on-message-channel" aria-hidden="true">#</a> create callback on message channel</h1><h2 id="question" tabindex="-1"><a class="header-anchor" href="#question" aria-hidden="true">#</a> Question</h2><p>We have <code>SomeChannel</code> which allows us to send messages between 2 ports.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span>port1<span class="token punctuation">,</span> port2<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

port2<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token comment">// hi</span>
<span class="token punctuation">}</span>
port1<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),v=s("It looks like "),h={href:"https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel",target:"_blank",rel:"noopener noreferrer"},b=s("MessageChannel"),g=s(", but "),_=n("code",null,"SomeChannel",-1),f=s(" is not in good condition, it has random delay in sending the messages, which means "),w=n("strong",null,"the order messages are sent might be different from the order they are received",-1),y=s("."),C=c(`<p>Now your job is to create a <code>BetterChannel</code> that enables communication between ports with callback and reply handle, but on top of <code>SomeChannel</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span>port1<span class="token punctuation">,</span> port2<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BetterChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

port2<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> reply</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>message <span class="token operator">===</span> <span class="token string">&#39;ping?&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;pong!&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>message <span class="token operator">===</span> <span class="token string">&#39;pong?&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;ping!&#39;</span><span class="token punctuation">)</span> 
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

port1<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;ping?&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">// &#39;pong!&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>you should avoid global state outside of the classes.</li><li>internally <code>SomeChannel</code> must be used.</li><li>though there might be delays, messages are guaranteed to be delivered through <code>SomeChannel</code>, but it is worthy for you to think about the case in which messages might be dropped.</li></ol><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,4),S=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// interface SomePort {"),s(`
`),n("span",{class:"token comment"},"//   postMessage: (message: string) => void"),s(`
`),n("span",{class:"token comment"},"//   onmessage?: (message: string) => void"),s(`
`),n("span",{class:"token comment"},"// }"),s(`

`),n("span",{class:"token comment"},"// declare class SomeChannel {"),s(`
`),n("span",{class:"token comment"},"//   port1: SomePort"),s(`
`),n("span",{class:"token comment"},"//   port2: SomePort"),s(`
`),n("span",{class:"token comment"},"// }"),s(`

`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"BetterChannel"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s("port1"),n("span",{class:"token punctuation"},","),s(" port2"),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"SomeChannel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("pre",null,[n("code",null,`::: code-group-item typescript
`)],-1),j=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"interface"),s(),n("span",{class:"token class-name"},"SomePort"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token function-variable function"},"postMessage"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"("),s("message"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token keyword"},"void"),s(`
  onmessage`),n("span",{class:"token operator"},"?"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"("),s("message"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token keyword"},"void"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"declare"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"SomeChannel"),s(),n("span",{class:"token punctuation"},"{"),s(`
  port1`),n("span",{class:"token operator"},":"),s(` SomePort
  port2`),n("span",{class:"token operator"},":"),s(` SomePort
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"BetterChannel"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s("port1"),n("span",{class:"token punctuation"},","),s(" port2"),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"SomeChannel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),B=n("p",null,":::",-1),M=n("h2",{id:"source",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#source","aria-hidden":"true"},"#"),s(" Source")],-1),P={href:"https://bigfrontend.dev/problem/some-message-channel",target:"_blank",rel:"noopener noreferrer"},I=s("Source From");function N(G,V){const t=e("ExternalLinkIcon"),p=e("CodeGroupItem"),l=e("CodeGroup");return d(),r(u,null,[m,n("p",null,[v,n("a",h,[b,a(t)]),g,_,f,w,y]),C,a(l,null,{default:o(()=>[a(p,{title:"javascript",active:""},{default:o(()=>[S]),_:1}),x,j,B]),_:1}),M,n("p",null,[n("a",P,[I,a(t)])])],64)}var q=i(k,[["render",N],["__file","some-message-channel.html.vue"]]);export{q as default};
