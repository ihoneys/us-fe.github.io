import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";import{r as t,c as r,a as n,b as a,w as c,F as u,d as s,e as o,o as m}from"./app.22a70bca.js";const d={},k=n("h1",{id:"implement-a-general-memoization-function-memo",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#implement-a-general-memoization-function-memo","aria-hidden":"true"},"#"),s(" Implement a general memoization function - "),n("code",null,"memo()")],-1),h=n("h2",{id:"question",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#question","aria-hidden":"true"},"#"),s(" Question")],-1),v={href:"https://whatthefuck.is/memoization",target:"_blank",rel:"noopener noreferrer"},b=s("Memoization"),f=s(" is a common technique to boost performance. If you use React, you definitely have used "),_=n("code",null,"React.memo",-1),g=s(" before."),y=o(`<p>Memoization is also commonly used in algorithm problem, when you have a recursion solution, in most cases, you can improve it by memoization, and then you might be able to get a Dynamic Programming approach.</p><p>So could you implement a general <code>memo()</code> function, which caches the result once called, so when same arguments are passed in, the result will be returned right away.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arg1 <span class="token operator">+</span> arg2
<span class="token punctuation">}</span>

<span class="token keyword">const</span> memoed <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>

<span class="token function">memoed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> 
<span class="token comment">// 3, func is called</span>

<span class="token function">memoed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> 
<span class="token comment">// 3 is returned right away without calling func</span>

<span class="token function">memoed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment">// 4, new arguments, so func is called</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),w=s("The arguments are arbitrary, so memo should accept an extra resolver parameter, which is used to generate the cache key, like what "),x={href:"https://lodash.com/docs/4.17.15#memoize",target:"_blank",rel:"noopener noreferrer"},z=s("_.memoize()"),j=s(" does."),C=o(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> memoed <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;samekey&#39;</span><span class="token punctuation">)</span>

<span class="token function">memoed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> 
<span class="token comment">// 3, func is called, 3 is cached with key &#39;samekey&#39;</span>

<span class="token function">memoed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> 
<span class="token comment">// 3, since key is the same, 3 is returned without calling func</span>

<span class="token function">memoed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> 
<span class="token comment">// 3, since key is the same, 3 is returned without calling func</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Default cache key could be just <code>Array.from(arguments).join(&#39;_&#39;)</code></p><p><em>note</em></p><p>It is a trade-off of space for time, so if you use this in an interview, please do analyze how much space it might cost.</p><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,5),I=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("Function"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"func"),s(`
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"("),s("args"),n("span",{class:"token operator"},":"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" string "),n("span",{class:"token punctuation"},"}")]),s("  "),n("span",{class:"token optional-parameter"},[n("span",{class:"token punctuation"},"["),n("span",{class:"token parameter"},"resolver"),n("span",{class:"token punctuation"},"]")]),s(` - cache key generator
 */`)]),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"memo"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("func"),n("span",{class:"token punctuation"},","),s(" resolver")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// your code here"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=o('<h2 id="related" tabindex="-1"><a class="header-anchor" href="#related" aria-hidden="true">#</a> Related</h2><ul><li><a href="./implement-memoizeOne">implement memoizeOne()</a></li></ul><h2 id="source" tabindex="-1"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2>',3),G={href:"https://bigfrontend.dev/problem/implement-general-memoization-function",target:"_blank",rel:"noopener noreferrer"},N=s("Source From");function S(V,q){const e=t("ExternalLinkIcon"),i=t("CodeGroupItem"),p=t("CodeGroup");return m(),r(u,null,[k,h,n("p",null,[n("a",v,[b,a(e)]),f,_,g]),y,n("p",null,[w,n("a",x,[z,a(e)]),j]),C,a(p,null,{default:c(()=>[a(i,{title:"javascript",active:""},{default:c(()=>[I]),_:1})]),_:1}),F,n("p",null,[n("a",G,[N,a(e)])])],64)}var M=l(d,[["render",S],["__file","implement-general-memoization-function.html.vue"]]);export{M as default};
