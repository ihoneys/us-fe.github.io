import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";import{r as t,c as r,a as n,b as a,w as c,F as u,d as s,e as o,o as d}from"./app.22a70bca.js";const b={},v=n("h1",{id:"create-an-observable",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#create-an-observable","aria-hidden":"true"},"#"),s(" create an Observable")],-1),k=n("h2",{id:"question",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#question","aria-hidden":"true"},"#"),s(" Question")],-1),m=s("Have you ever used "),h={href:"https://rxjs-dev.firebaseapp.com/guide/overview",target:"_blank",rel:"noopener noreferrer"},_=s("RxJS"),f=s(" before? The most important concept in it is "),g={href:"https://rxjs-dev.firebaseapp.com/guide/observable",target:"_blank",rel:"noopener noreferrer"},w=s("Observable"),x=s(" and "),j={href:"https://rxjs-dev.firebaseapp.com/guide/observer",target:"_blank",rel:"noopener noreferrer"},O=s("Observer"),y=s("."),S=o(`<p>Observable defines how values are delivered to Observer. Observer is just a set of callbacks.</p><p>Let&#39;s look at the code.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;we got a value&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;we got an error&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ok, no more values&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Above is an Observer which is pretty clear about what it is doing.</p><p>Then we could attach this Observer to some Observable. Observable feeds this observer with values or errors.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> observable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">subscriber</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  subscriber<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  subscriber<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    subscriber<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    subscriber<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
    subscriber<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The code plainly says when is a subscriber is attached,</p><ol><li>subscriber is fed with a value <code>1</code></li><li>subscriber is then fed with a value <code>2</code></li><li>wait 100 ms</li><li>subscriber is fed with <code>3</code></li><li>subscriber is fed with <code>4</code></li><li>no more values for subscriber</li></ol><p>Now if we attach above <code>observer</code> to <code>observable</code>, <code>next</code> and <code>complete</code> of subscriber are called in order.(be aware that there is a delay between 2 and 3)</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> sub <span class="token operator">=</span> observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span>
<span class="token comment">// we got a value 1</span>
<span class="token comment">// we got a value 2</span>

<span class="token comment">// we got a value 3</span>
<span class="token comment">// we got a value 4</span>
<span class="token comment">// ok, no more values</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),C=s("Notice "),N=n("code",null,"subscribe()",-1),T=s(" return a "),F={href:"https://rxjs-dev.firebaseapp.com/guide/subscription",target:"_blank",rel:"noopener noreferrer"},G=s("Subscription"),I=s(" which could be used to stop listening to the value delivery."),V=o(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> sub <span class="token operator">=</span> observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ok we only subscribe for 100ms</span>
  sub<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So this is the basic idea of Observable and Observer. There will be a few more interesting follow-up problems.</p><p><strong>Now you are asked to implement a basic Observable class</strong>, which makes above possible.</p><p>Some extra requirements are listed here.</p><ol><li><code>error</code> and <code>complete</code> can only be delivered once, <code>next/error/complete</code> after <code>error/complete</code> should not work</li><li>for a subscriber object, <code>next/error/complete</code> callback are all optional. if a function is passed as observer, it is treated as <code>next</code>.</li><li>should support multiple subscription</li></ol><p><em>Further Reading</em></p>`,6),q={href:"https://github.com/tc39/proposal-observable",target:"_blank",rel:"noopener noreferrer"},B=s("https://github.com/tc39/proposal-observable"),E=n("h2",{id:"code",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#code","aria-hidden":"true"},"#"),s(" Code")],-1),L=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Observable"),s(),n("span",{class:"token punctuation"},"{"),s(`
  
  `),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"setup"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    
  `),n("span",{class:"token punctuation"},"}"),s(`
 
  `),n("span",{class:"token function"},"subscribe"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"subscriber"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=o('<h2 id="related" tabindex="-1"><a class="header-anchor" href="#related" aria-hidden="true">#</a> Related</h2><ul><li><a href="./implement-Observable-from">implement Observable.from()</a></li><li><a href="./implement-Observable-Subject">implement Observable Subject</a></li></ul><h2 id="source" tabindex="-1"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2>',3),A={href:"https://bigfrontend.dev/problem/create-an-Observable",target:"_blank",rel:"noopener noreferrer"},H=s("Source From");function J(Q,z){const e=t("ExternalLinkIcon"),p=t("CodeGroupItem"),i=t("CodeGroup");return d(),r(u,null,[v,k,n("p",null,[m,n("a",h,[_,a(e)]),f,n("a",g,[w,a(e)]),x,n("a",j,[O,a(e)]),y]),S,n("p",null,[C,N,T,n("a",F,[G,a(e)]),I]),V,n("p",null,[n("a",q,[B,a(e)])]),E,a(i,null,{default:c(()=>[a(p,{title:"javascript",active:""},{default:c(()=>[L]),_:1})]),_:1}),R,n("p",null,[n("a",A,[H,a(e)])])],64)}var M=l(b,[["render",J],["__file","create-an-observable.html.vue"]]);export{M as default};
