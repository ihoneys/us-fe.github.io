import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";import{r as s,c as i,b as e,w as t,a as n,F as u,e as l,d as a,o as d}from"./app.22a70bca.js";const m={},k=l(`<h1 id="find-median-of-two-sorted-array" tabindex="-1"><a class="header-anchor" href="#find-median-of-two-sorted-array" aria-hidden="true">#</a> find median of two sorted array</h1><h2 id="question" tabindex="-1"><a class="header-anchor" href="#question" aria-hidden="true">#</a> Question</h2><p>Given two sorted array of integers, please return the median.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">median</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>If there are even numbers, return the average.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">median</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// 2.5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>follow-up</strong></p><p>What is the time &amp; space cost of your approach? Could you do better?</p><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,9),h=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[a(`/**
 * `),n("span",{class:"token keyword"},"@param"),a(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),a("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),a(),n("span",{class:"token parameter"},"arr1"),a(` - sorted integer array
 * `),n("span",{class:"token keyword"},"@param"),a(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),a("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),a(),n("span",{class:"token parameter"},"arr2"),a(` - sorted integer array
 * `),n("span",{class:"token keyword"},"@returns"),a(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),a("number"),n("span",{class:"token punctuation"},"}")]),a(`
 */`)]),a(`
`),n("span",{class:"token keyword"},"function"),a(),n("span",{class:"token function"},"median"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[a("arr1"),n("span",{class:"token punctuation"},","),a(" arr2")]),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token comment"},"// your code here"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=n("h2",{id:"source",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#source","aria-hidden":"true"},"#"),a(" Source")],-1),b={href:"https://bigfrontend.dev/problem/find-median-of-2-sorted-array",target:"_blank",rel:"noopener noreferrer"},f=a("Source From");function _(g,y){const o=s("CodeGroupItem"),c=s("CodeGroup"),r=s("ExternalLinkIcon");return d(),i(u,null,[k,e(c,null,{default:t(()=>[e(o,{title:"javascript",active:""},{default:t(()=>[h]),_:1})]),_:1}),v,n("p",null,[n("a",b,[f,e(r)])])],64)}var j=p(m,[["render",_],["__file","find-median-of-sorted-array.html.vue"]]);export{j as default};
