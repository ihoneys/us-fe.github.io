import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";import{r as a,c as p,a as n,b as e,w as o,F as r,d as s,e as d,o as u}from"./app.22a70bca.js";const k={},m=n("h1",{id:"detect-circle-in-linked-list",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#detect-circle-in-linked-list","aria-hidden":"true"},"#"),s(" detect circle in linked list")],-1),h=n("h2",{id:"question",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#question","aria-hidden":"true"},"#"),s(" Question")],-1),v=s("A "),_={href:"https://en.wikipedia.org/wiki/Linked_list#Singly_linked_list",target:"_blank",rel:"noopener noreferrer"},b=s("Singly Linked List"),f=s(" is a bunch of nodes linked in one direction."),g=d(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  val<span class="token operator">:</span> <span class="token builtin">any</span>
  next<span class="token operator">:</span> Node
  <span class="token function">constructor</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> next<span class="token operator">:</span>Node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val
    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> node2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> node1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> node2<span class="token punctuation">)</span> <span class="token comment">// connect 1 -&gt; 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A Node might link to a node before it, thus creating a circle.</p><p>Can you write a function to detect it?</p><p><strong>Follow-up</strong></p><p>What is the space cost for your approach? Can you solve it <strong>without extra space</strong>?</p><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,6),y=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("Node"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"head"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("boolean"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"hasCircle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"head"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// your code here"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=n("h2",{id:"source",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#source","aria-hidden":"true"},"#"),s(" Source")],-1),x={href:"https://bigfrontend.dev/problem/detect-circle-in-linked-list",target:"_blank",rel:"noopener noreferrer"},C=s("Source From");function N(L,I){const t=a("ExternalLinkIcon"),c=a("CodeGroupItem"),i=a("CodeGroup");return u(),p(r,null,[m,h,n("p",null,[v,n("a",_,[b,e(t)]),f]),g,e(i,null,{default:o(()=>[e(c,{title:"javascript",active:""},{default:o(()=>[y]),_:1})]),_:1}),w,n("p",null,[n("a",x,[C,e(t)])])],64)}var F=l(k,[["render",N],["__file","detect-circle-in-linked-list.html.vue"]]);export{F as default};
