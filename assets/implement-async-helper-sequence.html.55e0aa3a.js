import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";import{r as e,c as r,a as n,b as a,w as c,F as u,d as s,e as o,o as d}from"./app.22a70bca.js";const k={},m=n("h1",{id:"implement-async-helper-sequence",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#implement-async-helper-sequence","aria-hidden":"true"},"#"),s(" implement async helper - "),n("code",null,"sequence()")],-1),h=n("h2",{id:"question",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#question","aria-hidden":"true"},"#"),s(" Question")],-1),v=s("This problem is similar to "),b={href:"https://bigfrontend.dev/problem/what-is-composition-create-a-pipe",target:"_blank",rel:"noopener noreferrer"},y=s("11. what is Composition? create a pipe()"),_=s("."),f=o(`<p>You are asked to implement an async function helper, <code>sequence()</code> which chains up async functions, like what <code>pipe()</code> does.</p><p>All async functions have following interface</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> Error<span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>

<span class="token keyword">type</span> <span class="token class-name">AsyncFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
   callback<span class="token operator">:</span> Callback<span class="token punctuation">,</span>
   data<span class="token operator">:</span> <span class="token builtin">any</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Your <code>sequence()</code> should <strong>accept AsyncFunc array</strong>, and <strong>chain them up by passing new data to the next AsyncFunc through data in Callback.</strong></p><p>Suppose we have an async func which just multiple a number by 2</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">asyncTimes2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Your <code>sequence()</code> should be able to accomplish this</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> asyncTimes4 <span class="token operator">=</span> <span class="token function">sequence</span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span>
    asyncTimes2<span class="token punctuation">,</span>
    asyncTimes2
  <span class="token punctuation">]</span>
<span class="token punctuation">)</span>

<span class="token function">asyncTimes4</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">// 4</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once an error occurs, it should trigger the last callback without triggering the uncalled functions.</p><p><strong>Follow up</strong></p><p>Can you solve it with and without Promise?</p><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,12),g=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},`/*
type Callback = (error: Error, data: any) => void

type AsyncFunc = (
   callback: Callback,
   data: any
) => void

*/`),s(`

`),n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("AsyncFunc"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"funcs"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"("),s("callback"),n("span",{class:"token operator"},":"),s(" Callback"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token keyword"},"void"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"sequence"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"funcs"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// your code here"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=o('<h2 id="related" tabindex="-1"><a class="header-anchor" href="#related" aria-hidden="true">#</a> Related</h2><ul><li><a href="./what-is-composition-create-a-pipe">what is Composition? create a pipe()</a></li><li><a href="./implement-async-helper-parallel">implement async helper - <code>parallel()</code></a></li><li><a href="./implement-async-helper-race">implement async helper - <code>race()</code></a></li></ul><h2 id="source" tabindex="-1"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2>',3),x={href:"https://bigfrontend.dev/problem/implement-async-helper-sequence",target:"_blank",rel:"noopener noreferrer"},C=s("Source From");function q(j,F){const t=e("ExternalLinkIcon"),p=e("CodeGroupItem"),l=e("CodeGroup");return d(),r(u,null,[m,h,n("p",null,[v,n("a",b,[y,a(t)]),_]),f,a(l,null,{default:c(()=>[a(p,{title:"javascript",active:""},{default:c(()=>[g]),_:1})]),_:1}),w,n("p",null,[n("a",x,[C,a(t)])])],64)}var E=i(k,[["render",q],["__file","implement-async-helper-sequence.html.vue"]]);export{E as default};
