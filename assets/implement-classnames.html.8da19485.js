import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";import{r as t,c as r,a as s,b as a,w as p,F as u,e as o,d as n,o as d}from"./app.22a70bca.js";const m={},k=o(`<h1 id="implement-classnames" tabindex="-1"><a class="header-anchor" href="#implement-classnames" aria-hidden="true">#</a> implement classNames()</h1><h2 id="question" tabindex="-1"><a class="header-anchor" href="#question" aria-hidden="true">#</a> Question</h2><p>If using React, you can set the prop <code>className</code> to add class name to an element, it is string so you can add multiple class names like this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">&quot;classname1 classname2&quot;</span><span class="token operator">&gt;</span>
  <span class="token constant">BFE</span><span class="token punctuation">.</span>dev can help
<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When class names are dynamically generated, it becomes verbose.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>p 
  className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">classname1  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>shouldAddClassname2 <span class="token operator">?</span> <span class="token string">&#39;classname2&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
  <span class="token constant">BFE</span><span class="token punctuation">.</span>dev can help
<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),v={href:"https://www.npmjs.com/package/classnames",target:"_blank",rel:"noopener noreferrer"},h=n("classnames"),b=n(" can help with this."),g=o(`<p><code>classNames()</code> accepts arbitrary arguments, filter out the falsy values, and generate the final className string.</p><ol><li>string and number are used directly.</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">classNames</span><span class="token punctuation">(</span><span class="token string">&#39;BFE&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dev&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> 
<span class="token comment">// &#39;BFE dev 100&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>other primitives are ignored.</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">classNames</span><span class="token punctuation">(</span>
  <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1n</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
<span class="token punctuation">)</span> 
<span class="token comment">// &#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),_={start:"3"},f=n("Object's enumerable property keys are kept if the key is string and value is truthy. "),y={href:"https://bigfrontend.dev/problem/implement-Array-prototype.flat",target:"_blank",rel:"noopener noreferrer"},j=n("Array should be flattened"),x=n("."),w=o(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span>cool <span class="token operator">=</span> <span class="token string">&#39;!&#39;</span>

<span class="token function">classNames</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token constant">BFE</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">dev</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">is</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span> 
<span class="token comment">// &#39;BFE dev is cool&#39;</span>

<span class="token function">classNames</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;BFE&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">dev</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;is&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// &#39;BFE dev is cool&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Please implement your own classNames()</strong>.</p><p><strong>note</strong></p><p>It is not the goal to reimplement the original package, so the spec might be a little different, please follow the above description.</p><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,5),N=s("div",{class:"language-javascript ext-js line-numbers-mode"},[s("pre",{class:"language-javascript"},[s("code",null,[s("span",{class:"token doc-comment comment"},[n(`/**
 * `),s("span",{class:"token keyword"},"@param"),n(),s("span",{class:"token class-name"},[s("span",{class:"token punctuation"},"{"),n("any"),s("span",{class:"token punctuation"},"["),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},"}")]),n(),s("span",{class:"token parameter"},"args"),n(`
 * `),s("span",{class:"token keyword"},"@returns"),n(),s("span",{class:"token class-name"},[s("span",{class:"token punctuation"},"{"),n("string"),s("span",{class:"token punctuation"},"}")]),n(`
 */`)]),n(`
`),s("span",{class:"token keyword"},"function"),n(),s("span",{class:"token function"},"classNames"),s("span",{class:"token punctuation"},"("),s("span",{class:"token parameter"},[s("span",{class:"token operator"},"..."),n("args")]),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token comment"},"// your code here"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),B=s("h2",{id:"source",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#source","aria-hidden":"true"},"#"),n(" Source")],-1),E={href:"https://bigfrontend.dev/problem/implement-classnames",target:"_blank",rel:"noopener noreferrer"},F=n("Source From");function C(I,q){const e=t("ExternalLinkIcon"),c=t("CodeGroupItem"),l=t("CodeGroup");return d(),r(u,null,[k,s("p",null,[s("a",v,[h,a(e)]),b]),g,s("ol",_,[s("li",null,[f,s("a",y,[j,a(e)]),x])]),w,a(l,null,{default:p(()=>[a(c,{title:"javascript",active:""},{default:p(()=>[N]),_:1})]),_:1}),B,s("p",null,[s("a",E,[F,a(e)])])],64)}var V=i(m,[["render",C],["__file","implement-classnames.html.vue"]]);export{V as default};
