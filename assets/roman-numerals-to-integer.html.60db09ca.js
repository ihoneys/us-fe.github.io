import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";import{r as t,c as p,a as n,b as s,w as o,F as d,d as e,e as r,o as u}from"./app.22a70bca.js";const m={},_=n("h1",{id:"roman-numerals-to-integer",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#roman-numerals-to-integer","aria-hidden":"true"},"#"),e(" roman numerals to integer")],-1),h=n("h2",{id:"question",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#question","aria-hidden":"true"},"#"),e(" Question")],-1),k={href:"https://en.wikipedia.org/wiki/Roman_numerals#Standard_form",target:"_blank",rel:"noopener noreferrer"},v=e("Roman numerals"),g=e(" are represented by combinations of following seven symbols, each with a fixed integer value."),b=r("<p>Symbol</p><p>I</p><p>V</p><p>X</p><p>L</p><p>C</p><p>D</p><p>M</p><p>Value</p><p>1</p><p>5</p><p>10</p><p>50</p><p>100</p><p>500</p><p>1000</p>",16),f=e("For "),I={href:"https://en.wikipedia.org/wiki/Roman_numerals#Standard_form",target:"_blank",rel:"noopener noreferrer"},x=e("Standard form"),w=e(", subtractive notation is used, meaning 4 is "),C=n("code",null,"IV",-1),y=e(" rather than "),S=n("code",null,"IIII",-1),X=e(", 9 is "),T=n("code",null,"IX",-1),V=e(" rather than "),j=n("code",null,"VIIII",-1),M=e(". Same rule applies to 40("),N=n("code",null,"XL",-1),F=e(") and 900("),G=n("code",null,"CM",-1),L=e(") .etc."),B=r(`<p>Simply speaking, the roman numerals in standard form follow these rules.</p><ol><li>symbols are listed from highest to lowest, from left to right</li><li>from left to right, if the next symbol value is bigger than current one, it means subtracting, otherwise adding.</li></ol><p>Please implement <code>romanToInteger()</code>. The input are all valid strings.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
<span class="token function">romanToInteger</span><span class="token punctuation">(</span><span class="token string">&#39;CXXIII&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 123</span>

<span class="token function">romanToInteger</span><span class="token punctuation">(</span><span class="token string">&#39;MCMXCIX&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 1999</span>

<span class="token function">romanToInteger</span><span class="token punctuation">(</span><span class="token string">&#39;MMMCDXX&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 3420</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,5),E=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[e(`/**
 * `),n("span",{class:"token keyword"},"@param"),e(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),e("string"),n("span",{class:"token punctuation"},"}")]),e(),n("span",{class:"token parameter"},"str"),e(` - roman numeral string
 * `),n("span",{class:"token keyword"},"@returns"),e(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),e("number"),n("span",{class:"token punctuation"},"}")]),e(` integer
 */`)]),e(`
`),n("span",{class:"token keyword"},"function"),e(),n("span",{class:"token function"},"romanToInteger"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"str"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
  `),n("span",{class:"token comment"},"// your code here"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=n("h2",{id:"source",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#source","aria-hidden":"true"},"#"),e(" Source")],-1),q={href:"https://bigfrontend.dev/problem/roman-numerals-to-integer",target:"_blank",rel:"noopener noreferrer"},D=e("Source From");function P(Q,z){const a=t("ExternalLinkIcon"),i=t("CodeGroupItem"),c=t("CodeGroup");return u(),p(d,null,[_,h,n("p",null,[n("a",k,[v,s(a)]),g]),b,n("p",null,[f,n("a",I,[x,s(a)]),w,C,y,S,X,T,V,j,M,N,F,G,L]),B,s(c,null,{default:o(()=>[s(i,{title:"javascript",active:""},{default:o(()=>[E]),_:1})]),_:1}),R,n("p",null,[n("a",q,[D,s(a)])])],64)}var J=l(m,[["render",P],["__file","roman-numerals-to-integer.html.vue"]]);export{J as default};
