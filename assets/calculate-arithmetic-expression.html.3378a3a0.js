import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";import{r as s,c as l,a as e,b as a,w as o,F as d,d as n,e as u,o as p}from"./app.22a70bca.js";const m={},h=e("h1",{id:"calculate-arithmetic-expression",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#calculate-arithmetic-expression","aria-hidden":"true"},"#"),n(" calculate arithmetic expression")],-1),_=e("h2",{id:"question",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#question","aria-hidden":"true"},"#"),n(" Question")],-1),k=n("In "),v={href:"https://bigfrontend.dev/problem/create-a-tokenizer",target:"_blank",rel:"noopener noreferrer"},b=n("119. create a tokenizer"),f=n(", you are able to extract the tokens from a string with invalid spaces."),g=u(`<p>Now please <code>calculate()</code> the result of the string. You can use the tokenizer you wrote before.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
<span class="token function">calculate</span><span class="token punctuation">(</span><span class="token string">&#39;1 * (20 -   300      ) &#39;</span><span class="token punctuation">)</span>
<span class="token comment">// -280</span>

<span class="token function">calculate</span><span class="token punctuation">(</span><span class="token string">&#39;     1/0 &#39;</span><span class="token punctuation">)</span>
<span class="token comment">// Infinity</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>the input expression is syntactically valid, containing non-negative integers, <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>(</code>, <code>)</code> and spaces</li><li>Don&#39;t use <code>eval()</code></li></ol><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,4),x=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token doc-comment comment"},[n(`/**
 * `),e("span",{class:"token keyword"},"@param"),n(),e("span",{class:"token class-name"},[e("span",{class:"token punctuation"},"{"),n("string"),e("span",{class:"token punctuation"},"}")]),n(),e("span",{class:"token parameter"},"str"),n(`
 * `),e("span",{class:"token keyword"},"@returns"),n(),e("span",{class:"token class-name"},[e("span",{class:"token punctuation"},"{"),n("Number"),e("span",{class:"token punctuation"},"}")]),n(`
 */`)]),n(`
`),e("span",{class:"token keyword"},"function"),n(),e("span",{class:"token function"},"calculate"),e("span",{class:"token punctuation"},"("),e("span",{class:"token parameter"},"str"),e("span",{class:"token punctuation"},")"),n(),e("span",{class:"token punctuation"},"{"),n(`
  `),e("span",{class:"token comment"},"// your code here"),n(`
`),e("span",{class:"token punctuation"},"}"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),y=e("h2",{id:"source",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#source","aria-hidden":"true"},"#"),n(" Source")],-1),w={href:"https://bigfrontend.dev/problem/calculate-arithmetic-expression",target:"_blank",rel:"noopener noreferrer"},j=n("Source From");function C(I,N){const t=s("ExternalLinkIcon"),c=s("CodeGroupItem"),i=s("CodeGroup");return p(),l(d,null,[h,_,e("p",null,[k,e("a",v,[b,a(t)]),f]),g,a(i,null,{default:o(()=>[a(c,{title:"javascript",active:""},{default:o(()=>[x]),_:1})]),_:1}),y,e("p",null,[e("a",w,[j,a(t)])])],64)}var V=r(m,[["render",C],["__file","calculate-arithmetic-expression.html.vue"]]);export{V as default};
