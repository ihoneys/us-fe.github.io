import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";import{r as e,c as i,a as n,b as a,w as o,F as u,d as s,e as r,o as d}from"./app.22a70bca.js";const k={},m=n("h1",{id:"tobe-or-not-tobe",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#tobe-or-not-tobe","aria-hidden":"true"},"#"),s(" toBe() or not.toBe()")],-1),h=n("h2",{id:"question",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#question","aria-hidden":"true"},"#"),s(" Question")],-1),v=s("Here are some simple "),b={href:"https://jestjs.io/docs/expect#expectvalue",target:"_blank",rel:"noopener noreferrer"},_=s("Jest"),f=s(" test code."),x=r(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// \u2705</span>
<span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// \u274C</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>We can reverse it with <code>not</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// \u274C</span>
<span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// \u2705</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Please implement <code>myExpect()</code> to support <code>toBe()</code> and also <code>not</code>.</p><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,5),g=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * interface Matcher `),n("span",{class:"token punctuation"},"{"),s(`
 *  toBe(data: any): void
 * `),n("span",{class:"token punctuation"},"}"),s(`
 */`)]),s(`
`),n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("any"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"input"),s(`
 * `),n("span",{class:"token keyword"},"@returns"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("Matcher "),n("span",{class:"token operator"},"&"),s(),n("span",{class:"token punctuation"},"{"),s("not"),n("span",{class:"token operator"},":"),s(" Matcher"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"myExpect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"input"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// your code here"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=n("pre",null,[n("code",null,`::: code-group-item typescript
`)],-1),j=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"interface"),s(),n("span",{class:"token class-name"},"Matcher"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token function"},"toBe"),n("span",{class:"token punctuation"},"("),s("data"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"any"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"void"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"myExpect"),n("span",{class:"token punctuation"},"("),s("input"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"any"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" Matcher "),n("span",{class:"token operator"},"&"),s(),n("span",{class:"token punctuation"},"{"),s("not"),n("span",{class:"token operator"},":"),s(" Matcher"),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// your code here"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),B=n("p",null,":::",-1),w=n("h2",{id:"source",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#source","aria-hidden":"true"},"#"),s(" Source")],-1),C={href:"https://bigfrontend.dev/problem/jest-assertion",target:"_blank",rel:"noopener noreferrer"},E=s("Source From");function M(G,I){const t=e("ExternalLinkIcon"),c=e("CodeGroupItem"),p=e("CodeGroup");return d(),i(u,null,[m,h,n("p",null,[v,n("a",b,[_,a(t)]),f]),x,a(p,null,{default:o(()=>[a(c,{title:"javascript",active:""},{default:o(()=>[g]),_:1}),y,j,B]),_:1}),w,n("p",null,[n("a",C,[E,a(t)])])],64)}var F=l(k,[["render",M],["__file","jest-assertion.html.vue"]]);export{F as default};
