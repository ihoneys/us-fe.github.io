import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";import{r as e,c as u,a as n,b as a,w as o,F as r,d as s,e as p,o as d}from"./app.22a70bca.js";const k={},m=n("h1",{id:"what-is-composition-create-a-pipe",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#what-is-composition-create-a-pipe","aria-hidden":"true"},"#"),s(" what is Composition? create a pipe()")],-1),v=n("h2",{id:"question",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#question","aria-hidden":"true"},"#"),s(" Question")],-1),h=s("what is Composition? It is actually not that difficult to understand, see "),b={href:"https://whatthefuck.is/composition",target:"_blank",rel:"noopener noreferrer"},f=s("@dan_abramov 's explanation"),_=s("."),g=p(`<p>Here you are asked to create a <code>pipe()</code> function, which chains multiple functions together to create a new function.</p><p>Suppose we have some simple functions like this</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">times</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>  <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> y
<span class="token keyword">const</span> <span class="token function-variable function">plus</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> y
<span class="token keyword">const</span> <span class="token function-variable function">subtract</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>  <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">-</span> y
<span class="token keyword">const</span> <span class="token function-variable function">divide</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">/</span> y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Your <code>pipe()</code> would be used to generate new functions</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
<span class="token function">pipe</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>  
<span class="token comment">// x * 2 * 3</span>

<span class="token function">pipe</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span> 
<span class="token comment">// (x * 2 + 3) * 4</span>

<span class="token function">pipe</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span> 
<span class="token comment">// (x * 2 - 3) / 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>notes</strong></p><ol><li>to make things simple, functions passed to <code>pipe()</code> will all accept 1 argument</li></ol><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,8),y=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("Array"),n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},"("),s("arg"),n("span",{class:"token operator"},":"),s(" any"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" any"),n("span",{class:"token punctuation"},">"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"funcs"),s(` 
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"("),s("arg"),n("span",{class:"token operator"},":"),s(" any"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" any"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"pipe"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"funcs"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token comment"},"// your code here"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("pre",null,[n("code",null,`::: code-group-item typescript
`)],-1),w=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},"Func"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("arg"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"any"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token builtin"},"any"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"pipe"),n("span",{class:"token punctuation"},"("),s("funcs"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"Array"),n("span",{class:"token operator"},"<"),s("Func"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" Func "),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token comment"},"// your code here"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=n("p",null,":::",-1),j=p('<h2 id="related" tabindex="-1"><a class="header-anchor" href="#related" aria-hidden="true">#</a> Related</h2><ul><li><a href="./implement-async-helper-sequence">implement async helper - <code>sequence()</code></a></li></ul><h2 id="source" tabindex="-1"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2>',3),F={href:"https://bigfrontend.dev/problem/what-is-composition-create-a-pipe",target:"_blank",rel:"noopener noreferrer"},I=s("Source From");function q(G,N){const t=e("ExternalLinkIcon"),c=e("CodeGroupItem"),i=e("CodeGroup");return d(),u(r,null,[m,v,n("p",null,[h,n("a",b,[f,a(t)]),_]),g,a(i,null,{default:o(()=>[a(c,{title:"javascript",active:""},{default:o(()=>[y]),_:1}),x,w,C]),_:1}),j,n("p",null,[n("a",F,[I,a(t)])])],64)}var A=l(k,[["render",q],["__file","what-is-composition-create-a-pipe.html.vue"]]);export{A as default};
