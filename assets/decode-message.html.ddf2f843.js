import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";import{r as a,c as p,b as e,w as t,a as n,F as r,e as d,d as s,o as u}from"./app.22a70bca.js";const m={},k=d(`<h1 id="decode-message" tabindex="-1"><a class="header-anchor" href="#decode-message" aria-hidden="true">#</a> decode message</h1><h2 id="question" tabindex="-1"><a class="header-anchor" href="#question" aria-hidden="true">#</a> Question</h2><p>Your are given a 2-D array of characters. There is a hidden message in it.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token constant">I</span> <span class="token constant">B</span> <span class="token constant">C</span> <span class="token constant">A</span> <span class="token constant">L</span> <span class="token constant">K</span> <span class="token constant">A</span>
<span class="token constant">D</span> <span class="token constant">R</span> <span class="token constant">F</span> <span class="token constant">C</span> <span class="token constant">A</span> <span class="token constant">E</span> <span class="token constant">A</span>
<span class="token constant">G</span> <span class="token constant">H</span> <span class="token constant">O</span> <span class="token constant">E</span> <span class="token constant">L</span> <span class="token constant">A</span> <span class="token constant">D</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The way to collect the message is as follows</p><ol><li>start at top left</li><li>move diagonally down right</li><li>when cannot move any more, try to switch to diagonally up right</li><li>when cannot move any more, try switch to diagonally down right, repeat 3</li><li>stop when cannot neither move down right or up right. the character on the path is the message</li></ol><p>for the input above, <code>IROCLED</code> should be returned.</p><p><em>notes</em></p><p>if no characters could be collected, return empty string</p><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,10),h=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("string"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"message"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("string"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"decode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"message"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// your code here"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=n("pre",null,[n("code",null,`::: code-group-item typescript
`)],-1),v=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"decode"),n("span",{class:"token punctuation"},"("),s("message"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// your code here"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=n("p",null,":::",-1),b=n("h2",{id:"source",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#source","aria-hidden":"true"},"#"),s(" Source")],-1),f={href:"https://bigfrontend.dev/problem/decode-message",target:"_blank",rel:"noopener noreferrer"},y=s("Source From");function w(x,C){const o=a("CodeGroupItem"),c=a("CodeGroup"),l=a("ExternalLinkIcon");return u(),p(r,null,[k,e(c,null,{default:t(()=>[e(o,{title:"javascript",active:""},{default:t(()=>[h]),_:1}),g,v,_]),_:1}),b,n("p",null,[n("a",f,[y,e(l)])])],64)}var I=i(m,[["render",w],["__file","decode-message.html.vue"]]);export{I as default};
