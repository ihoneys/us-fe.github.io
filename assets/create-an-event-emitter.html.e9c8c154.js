import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";import{r as t,c as l,a as n,b as e,w as c,F as r,d as s,e as u,o as d}from"./app.22a70bca.js";const m={},k=n("h1",{id:"create-an-event-emitter",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#create-an-event-emitter","aria-hidden":"true"},"#"),s(" create an Event Emitter")],-1),v=n("h2",{id:"question",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#question","aria-hidden":"true"},"#"),s(" Question")],-1),b=s("There is "),h={href:"https://nodejs.org/api/events.html#events_class_eventemitter",target:"_blank",rel:"noopener noreferrer"},_=s("Event Emitter in Node.js"),g=s(", Facebook once had "),f={href:"https://github.com/facebookarchive/emitter",target:"_blank",rel:"noopener noreferrer"},j=s("its own implementation"),w=s(" but now it is archived."),x=u(`<p>You are asked to create an Event Emitter Class</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Emitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>It should support event subscribing</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> sub1  <span class="token operator">=</span> emitter<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&#39;event1&#39;</span><span class="token punctuation">,</span> callback1<span class="token punctuation">)</span>
<span class="token keyword">const</span> sub2 <span class="token operator">=</span> emitter<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&#39;event2&#39;</span><span class="token punctuation">,</span> callback2<span class="token punctuation">)</span>

<span class="token comment">// same callback could subscribe </span>
<span class="token comment">// on same event multiple times</span>
<span class="token keyword">const</span> sub3 <span class="token operator">=</span> emitter<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&#39;event1&#39;</span><span class="token punctuation">,</span> callback1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>emit(eventName, ...args)</code> is used to trigger the callbacks, with args relayed</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;event1&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// callback1 will be called twice</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Subscription returned by <code>subscribe()</code> has a <code>release()</code> method that could be used to unsubscribe</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>sub1<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
sub3<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// now even if we emit &#39;event1&#39; again, </span>
<span class="token comment">// callback1 is not called anymore</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,9),E=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// please complete the implementation"),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"EventEmitter"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token function"},"subscribe"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("eventName"),n("span",{class:"token punctuation"},","),s(" callback")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  	
  `),n("span",{class:"token punctuation"},"}"),s(`
  
  `),n("span",{class:"token function"},"emit"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("eventName"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"..."),s("args")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  	
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=n("h2",{id:"source",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#source","aria-hidden":"true"},"#"),s(" Source")],-1),C={href:"https://bigfrontend.dev/problem/create-an-Event-Emitter",target:"_blank",rel:"noopener noreferrer"},N=s("Source From");function I(F,G){const a=t("ExternalLinkIcon"),o=t("CodeGroupItem"),i=t("CodeGroup");return d(),l(r,null,[k,v,n("p",null,[b,n("a",h,[_,e(a)]),g,n("a",f,[j,e(a)]),w]),x,e(i,null,{default:c(()=>[e(o,{title:"javascript",active:""},{default:c(()=>[E]),_:1})]),_:1}),y,n("p",null,[n("a",C,[N,e(a)])])],64)}var B=p(m,[["render",I],["__file","create-an-event-emitter.html.vue"]]);export{B as default};
