import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";import{r as e,c as i,b as a,w as t,a as n,F as r,e as d,d as s,o as u}from"./app.22a70bca.js";const k={},m=d(`<h1 id="reverse-a-linked-list" tabindex="-1"><a class="header-anchor" href="#reverse-a-linked-list" aria-hidden="true">#</a> reverse a linked list</h1><h2 id="question" tabindex="-1"><a class="header-anchor" href="#question" aria-hidden="true">#</a> Question</h2><p>Another basic algorithm even for Front End developers.</p><p>You are asked to <strong>reverse a linked list</strong>.</p><p>Suppose we have Node interface like this</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
   <span class="token keyword">new</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> next<span class="token operator">:</span> Node<span class="token punctuation">)</span><span class="token punctuation">;</span>
   val<span class="token operator">:</span> <span class="token builtin">number</span>
   next<span class="token operator">:</span> Node
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can then chain nodes together to create a linked list.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> Three <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> Two <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> Three<span class="token punctuation">)</span>
<span class="token keyword">const</span> One <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Two<span class="token punctuation">)</span>

<span class="token comment">//now we have  a linked list</span>
<span class="token comment">// 1 \u2192 2 \u2192 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now how can you reverse it to 3 \u2192 2 \u2192 1 ? you can modify the <code>next</code> property of each node, but not the <code>val</code>.</p><p><em>Follow up</em></p><p>Could you solve it with and without recursion?</p><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,12),v=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/** 
 * class Node `),n("span",{class:"token punctuation"},"{"),s(`
 *  new(val: number, next: Node);
 *    val: number
 *    next: Node
 * `),n("span",{class:"token punctuation"},"}"),s(`
 */`)]),s(`

`),n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("Node"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"list"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("Node"),n("span",{class:"token punctuation"},"}")]),s(` 
 */`)]),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"reverseLinkedList"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"list"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// your code"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=n("h2",{id:"source",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#source","aria-hidden":"true"},"#"),s(" Source")],-1),b={href:"https://bigfrontend.dev/problem/Reverse-a-linked-list",target:"_blank",rel:"noopener noreferrer"},_=s("Source From");function w(f,y){const o=e("CodeGroupItem"),c=e("CodeGroup"),l=e("ExternalLinkIcon");return u(),i(r,null,[m,a(c,null,{default:t(()=>[a(o,{title:"javascript",active:""},{default:t(()=>[v]),_:1})]),_:1}),h,n("p",null,[n("a",b,[_,a(l)])])],64)}var N=p(k,[["render",w],["__file","reverse-a-linked-list.html.vue"]]);export{N as default};
