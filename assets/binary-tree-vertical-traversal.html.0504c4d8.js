import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";import{r as a,c as p,b as s,w as t,a as n,F as u,e as o,d as e,o as d}from"./app.22a70bca.js";const m={},b=o(`<h1 id="binary-tree-vertical-traversal" tabindex="-1"><a class="header-anchor" href="#binary-tree-vertical-traversal" aria-hidden="true">#</a> binary tree vertical traversal</h1><h2 id="question" tabindex="-1"><a class="header-anchor" href="#question" aria-hidden="true">#</a> Question</h2><p>Traverse a binary tree vertically from left to right, from top to bottom, the binary tree contains positive integers as node values.</p><p><img src="https://cdn.bfe.dev/bfe/img/TiapkDukk2cfibNmKtYzq8d6AHeRGiKp_470x605_1604825105283.png" alt="" loading="lazy"></p><p>For above binary tree, vertical traversal should return</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If two nodes are at the same position, their order should inherit from their parent node. For example, 9 and 10 are at the same position, since 7 is before 8, so 9 should be before 10.</p><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,8),h=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// This is the class for the node"),e(`
`),n("span",{class:"token comment"},"// you can use this directly as it is bundled with your code"),e(`

`),n("span",{class:"token comment"},"// class Node {"),e(`
`),n("span",{class:"token comment"},"//   value: number"),e(`
`),n("span",{class:"token comment"},"//   left: null | Node"),e(`
`),n("span",{class:"token comment"},"//   right: null | Node"),e(`
`),n("span",{class:"token comment"},"//   constructor(val) {"),e(`
`),n("span",{class:"token comment"},"//     this.value = val"),e(`
`),n("span",{class:"token comment"},"//     this.left = null"),e(`
`),n("span",{class:"token comment"},"//     this.right = null"),e(`
`),n("span",{class:"token comment"},"//   }"),e(`
`),n("span",{class:"token comment"},"// }"),e(`

`),n("span",{class:"token doc-comment comment"},[e(`/**
 * `),n("span",{class:"token keyword"},"@param"),e(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),e("Node"),n("span",{class:"token punctuation"},"}")]),e(),n("span",{class:"token parameter"},"root"),e(`
 * `),n("span",{class:"token keyword"},"@returns"),e(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),e("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),e(`
 */`)]),e(`
`),n("span",{class:"token keyword"},"function"),e(),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
  `),n("span",{class:"token comment"},"// your code here"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),k=o('<h2 id="related" tabindex="-1"><a class="header-anchor" href="#related" aria-hidden="true">#</a> Related</h2><ul><li><a href="./serialize-and-deserialize-binary-tree">serialize and deserialize binary tree</a></li></ul><h2 id="source" tabindex="-1"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2>',3),v={href:"https://bigfrontend.dev/problem/binary-tree-vertical-traversal",target:"_blank",rel:"noopener noreferrer"},f=e("Source From");function _(y,g){const r=a("CodeGroupItem"),c=a("CodeGroup"),l=a("ExternalLinkIcon");return d(),p(u,null,[b,s(c,null,{default:t(()=>[s(r,{title:"javascript",active:""},{default:t(()=>[h]),_:1})]),_:1}),k,n("p",null,[n("a",v,[f,s(l)])])],64)}var j=i(m,[["render",_],["__file","binary-tree-vertical-traversal.html.vue"]]);export{j as default};
