import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";import{r as t,c as u,a as n,b as a,w as o,F as r,d as s,e as p,o as d}from"./app.22a70bca.js";const k={},m=n("h1",{id:"implement-basic-throttle",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#implement-basic-throttle","aria-hidden":"true"},"#"),s(" implement basic throttle()")],-1),h=n("h2",{id:"question",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#question","aria-hidden":"true"},"#"),s(" Question")],-1),b=s("Throttling is a common technique used in Web Application, in most cases using "),v={href:"https://lodash.com/docs/4.17.15#throttle",target:"_blank",rel:"noopener noreferrer"},g=s("lodash solution"),f=s(" would be a good choice."),_=p(`<p>could you implement your own version of basic <code>throttle()</code>?</p><p>In case you forgot, <code>throttle(func, delay)</code> will return a throttled function, which will invoke the func at a max frequency no matter how throttled one is called.</p><p>Here is an example.</p><p>Before throttling we have a series of calling like</p><p>\u2500A\u2500B\u2500C\u2500 \u2500D\u2500 \u2500 \u2500 \u2500 \u2500 \u2500 E\u2500 \u2500F\u2500G</p><p>After throttling at wait time of 3 dashes</p><p>\u2500A\u2500 \u2500 \u2500C\u2500 \u2500 \u2500D \u2500 \u2500 \u2500 \u2500 E\u2500 \u2500 \u2500G</p><p>Be aware that</p><ul><li>call A is triggered right way because not in waiting time</li><li>function call B is swallowed because B, C is in the cooling time from A, and C is latter.</li></ul><p><strong>notes</strong></p><ol><li><p>please follow above spec. the behavior is not exactly the same as <code>lodash.throttle()</code></p></li><li><p>because <code>window.setTimeout</code> and <code>window.clearTimeout</code> are not accurate in browser environment, they are replaced to other implementation when judging your code. They still have the same interface, and internally keep track of the timing for testing purpose.</p></li></ol><p>Something like below will be used to do the test.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> currentTime <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">const</span> <span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  currentTime <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">const</span> calls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
     calls<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>arg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">@</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>currentTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> throttled <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
  input<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">call</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
     <span class="token keyword">const</span> <span class="token punctuation">[</span>arg<span class="token punctuation">,</span> time<span class="token punctuation">]</span> <span class="token operator">=</span> call<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;@&#39;</span><span class="token punctuation">)</span>
     <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">throttled</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> calls
<span class="token punctuation">}</span>

<span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;A@0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B@2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C@3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;A@0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C@3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,14),w=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),s("args"),n("span",{class:"token operator"},":"),s("any"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" any"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"func"),s(`
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"wait"),s(`
 * `),n("span",{class:"token keyword"},"@returns"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),s("args"),n("span",{class:"token operator"},":"),s("any"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" any"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"throttle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("func"),n("span",{class:"token punctuation"},","),s(" wait")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// your code here"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=n("pre",null,[n("code",null,`::: code-group-item typescript
`)],-1),x=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(" throttle"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"T"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),s("args"),n("span",{class:"token operator"},":"),n("span",{class:"token builtin"},"any"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token builtin"},"any"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),s("func"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token constant"},"T"),n("span",{class:"token punctuation"},","),s(" wait"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token constant"},"T"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// your code here"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=n("p",null,":::",-1),T=p('<h2 id="related" tabindex="-1"><a class="header-anchor" href="#related" aria-hidden="true">#</a> Related</h2><ul><li><a href="./implement-throttle-with-leading-and-trailing-option">implement throttle() with leading &amp; trailing option</a></li><li><a href="./implement-basic-debounce">implement basic debounce()</a></li><li><a href="./implement-debounce-with-leading-and-trailing-option">implement debounce() with leading &amp; trailing option</a></li></ul><h2 id="source" tabindex="-1"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2>',3),B={href:"https://bigfrontend.dev/problem/implement-basic-throttle",target:"_blank",rel:"noopener noreferrer"},j=s("Source From");function A(E,G){const e=t("ExternalLinkIcon"),c=t("CodeGroupItem"),l=t("CodeGroup");return d(),u(r,null,[m,h,n("p",null,[b,n("a",v,[g,a(e)]),f]),_,a(l,null,{default:o(()=>[a(c,{title:"javascript",active:""},{default:o(()=>[w]),_:1}),y,x,C]),_:1}),T,n("p",null,[n("a",B,[j,a(e)])])],64)}var F=i(k,[["render",A],["__file","implement-basic-throttle.html.vue"]]);export{F as default};
