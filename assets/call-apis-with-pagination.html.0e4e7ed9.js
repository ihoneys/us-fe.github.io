import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";import{r as a,c as p,a as e,b as s,w as o,F as l,e as u,d as n,o as d}from"./app.22a70bca.js";const m={},h=u(`<h1 id="call-apis-with-pagination" tabindex="-1"><a class="header-anchor" href="#call-apis-with-pagination" aria-hidden="true">#</a> call APIs with pagination</h1><h2 id="question" tabindex="-1"><a class="header-anchor" href="#question" aria-hidden="true">#</a> Question</h2><p>Have you ever met some APIs with pagination, and needed to recursively fetch them based on response of previous request ?</p><p>Suppose we have a <code>/list</code> API, which returns an array <code>items</code>.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// fetchList is provided for you</span>
<span class="token keyword">const</span> <span class="token function-variable function">fetchList</span> <span class="token operator">=</span> <span class="token punctuation">(</span>since<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> 
  <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">{</span>items<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>for initial request, we just fetch <code>fetchList</code>. and get the last item id from response.</li><li>for next page, we need to call <code>fetchList(lastItemId)</code>.</li><li>repeat above process.</li></ol><p>The <code>/list</code> API only gives us 5 items at a time, with server-side filtering, it might be less than 5. But if none returned, it means nothing to fetch any more and we should stop.</p><p>You are asked to create a function that could return arbitrary amount of items.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> fetchListWithAmount <span class="token operator">=</span> <span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>note</em></p>`,10),k=n("You can achieve this by regular loop, even fancier solutions with "),v={href:"https://javascript.info/async-iterators-generator",target:"_blank",rel:"noopener noreferrer"},f=n("async iterators or async generators"),b=n(". You should try them all."),_=e("h2",{id:"code",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#code","aria-hidden":"true"},"#"),n(" Code")],-1),g=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token comment"},"// fetchList is provided for you"),n(`
`),e("span",{class:"token comment"},"// const fetchList = (since?: number) => "),n(`
`),e("span",{class:"token comment"},"//   Promise<{items: Array<{id: number}>}>"),n(`


`),e("span",{class:"token comment"},"// you can change this to generator function if you want"),n(`
`),e("span",{class:"token keyword"},"const"),n(),e("span",{class:"token function-variable function"},"fetchListWithAmount"),n(),e("span",{class:"token operator"},"="),n(),e("span",{class:"token keyword"},"async"),n(),e("span",{class:"token punctuation"},"("),e("span",{class:"token parameter"},[n("amount "),e("span",{class:"token operator"},"="),n(),e("span",{class:"token number"},"5")]),e("span",{class:"token punctuation"},")"),n(),e("span",{class:"token operator"},"=>"),n(),e("span",{class:"token punctuation"},"{"),n(`
  `),e("span",{class:"token comment"},"// your code here"),n(`
`),e("span",{class:"token punctuation"},"}"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),y=e("h2",{id:"source",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#source","aria-hidden":"true"},"#"),n(" Source")],-1),w={href:"https://bigfrontend.dev/problem/call-APIs-with-pagination",target:"_blank",rel:"noopener noreferrer"},x=n("Source From");function I(A,L){const t=a("ExternalLinkIcon"),i=a("CodeGroupItem"),r=a("CodeGroup");return d(),p(l,null,[h,e("p",null,[k,e("a",v,[f,s(t)]),b]),_,s(r,null,{default:o(()=>[s(i,{title:"javascript",active:""},{default:o(()=>[g]),_:1})]),_:1}),y,e("p",null,[e("a",w,[x,s(t)])])],64)}var j=c(m,[["render",I],["__file","call-apis-with-pagination.html.vue"]]);export{j as default};
