import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";import{r as e,c as l,a as n,b as a,w as o,F as r,d as s,e as u,o as d}from"./app.22a70bca.js";const k={},m=n("h1",{id:"interpolation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#interpolation","aria-hidden":"true"},"#"),s(" interpolation")],-1),v=n("h2",{id:"question",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#question","aria-hidden":"true"},"#"),s(" Question")],-1),h=n("p",null,"Have you ever added i18n support to your projects?",-1),b=s("Take "),_={href:"https://www.i18next.com/",target:"_blank",rel:"noopener noreferrer"},g=s("i18next"),f=s(" as an example, generally the keys and translations are kept separately, like this JSON below."),y=u(`<div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;evaluation&quot;</span><span class="token operator">:</span> <span class="token string">&quot;BFE.dev is {{evaluation}}&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>At places where this key is used, we can then interpolate the string by passing a data object.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">t</span><span class="token punctuation">(</span><span class="token string">&#39;evaluation&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>evaluation<span class="token operator">:</span> <span class="token string">&#39;fantastic&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;BFE.dev is fantastic&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, <strong>please create a similar <code>t()</code> function which accepts the translation directly</strong>.</p><h4 id="_1-it-supports-and-as-delimiters" tabindex="-1"><a class="header-anchor" href="#_1-it-supports-and-as-delimiters" aria-hidden="true">#</a> 1. it supports <code>{{</code> and <code>}}</code> as delimiters</h4><p>Let&#39;s make it clearer and simpler, when a new pair <code>{{</code> is met, characters until the following <code>}}</code> are treated as the property name.</p><p>For all the other cases, they should not be treated as delimiters.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">t</span><span class="token punctuation">(</span><span class="token string">&#39;BFE.dev is {{{evaluation}&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>evaluation<span class="token operator">:</span> <span class="token string">&#39;fantastic&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;BFE.dev is {{{evaluation}&quot;</span>

<span class="token function">t</span><span class="token punctuation">(</span><span class="token string">&#39;BFE.dev is {{{evaluation}}}&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;{evaluation&#39;</span><span class="token operator">:</span> <span class="token string">&#39;fantastic&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;BFE.dev is fantastic}&quot;</span>

<span class="token function">t</span><span class="token punctuation">(</span><span class="token string">&#39;BFE.dev is {{evalu ation}}&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;evalu ation&#39;</span><span class="token operator">:</span> <span class="token string">&#39;fantastic&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;BFE.dev is fantastic&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-if-no-data-is-passed-or-no-property-exists-just-leave-it-empty" tabindex="-1"><a class="header-anchor" href="#_2-if-no-data-is-passed-or-no-property-exists-just-leave-it-empty" aria-hidden="true">#</a> 2. if no data is passed or no property exists, just leave it empty</h4><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">t</span><span class="token punctuation">(</span><span class="token string">&#39;BFE.dev is {{evaluation}}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;BFE.dev is &quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,11),x=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("string"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"translation"),s(`
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("any"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"data"),s(`
 * `),n("span",{class:"token keyword"},"@returns"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("string"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"t"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("translation"),n("span",{class:"token punctuation"},","),s(" data")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// your code here"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=n("pre",null,[n("code",null,`::: code-group-item typescript:active
`)],-1),q=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"t"),n("span",{class:"token punctuation"},"("),s("translation"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},","),s(" data"),n("span",{class:"token operator"},"?"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"any"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// your code here"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=n("p",null,":::",-1),B=n("h2",{id:"source",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#source","aria-hidden":"true"},"#"),s(" Source")],-1),E={href:"https://bigfrontend.dev/problem/interpolation",target:"_blank",rel:"noopener noreferrer"},j=s("Source From");function C(N,G){const t=e("ExternalLinkIcon"),i=e("CodeGroupItem"),c=e("CodeGroup");return d(),l(r,null,[m,v,h,n("p",null,[b,n("a",_,[g,a(t)]),f]),y,a(c,null,{default:o(()=>[a(i,{title:"javascript"},{default:o(()=>[x]),_:1}),w,q,F]),_:1}),B,n("p",null,[n("a",E,[j,a(t)])])],64)}var V=p(k,[["render",C],["__file","interpolation.html.vue"]]);export{V as default};
