import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";import{r as o,c as r,a as n,b as a,w as p,F as u,d as s,e as t,o as d}from"./app.22a70bca.js";const k={},m=n("h1",{id:"virtual-dom-iv-jsx-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#virtual-dom-iv-jsx-1","aria-hidden":"true"},"#"),s(" Virtual DOM IV - JSX 1")],-1),v=n("h2",{id:"question",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#question","aria-hidden":"true"},"#"),s(" Question")],-1),b=s("If you are using React, you must be familiar with "),h={href:"https://facebook.github.io/jsx/",target:"_blank",rel:"noopener noreferrer"},g=s("JSX"),_=s("."),y=t(`<p>With JSX syntax support, transpilers are able to understand below non-standard code directly in JavaScript.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>p<span class="token operator">&gt;</span> <span class="token keyword">this</span> is <span class="token operator">&lt;</span>button className<span class="token operator">=</span><span class="token string">&quot;button&quot;</span><span class="token operator">&gt;</span>button<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Then it is transpiled to standard JavaScript function calls.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token string">&quot; this is &quot;</span><span class="token punctuation">,</span>
  React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&quot;button&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),f=s("have a try at "),S={href:"https://www.typescriptlang.org/play?#code/DwBwfABALgFglgZwoiwBGBXKUD2A7CAYwBsBDBBAOVIFsBTAXgCJNt8mxXc9gB6L-JD7ggA",target:"_blank",rel:"noopener noreferrer"},J=s("TypeScript Playground"),X=t(`<p>To illustrate how the transpilation works, let&#39;s start with a simple example.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>a<span class="token operator">&gt;</span>bfe<span class="token punctuation">.</span>dev<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>First the parser will create an AST(Abstract Syntax Tree) from the code.</p>`,3),q=s("Open above code "),w={href:"https://astexplorer.net/#/gist/46044fc473a92974cd8f933efc7635f6/8a876a4240ecf38d64c0e0af3c693a1c54d80525",target:"_blank",rel:"noopener noreferrer"},E=s("in AST Explorer"),x=s(", you can see the AST in the right pannel, roughly something like this:"),j=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token literal-property property">expression</span><span class="token operator">:</span> JSXElement <span class="token punctuation">{</span>
  <span class="token literal-property property">openingElement</span><span class="token operator">:</span> JSXOpeningElement <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> JSXIdentifier <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;a&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token literal-property property">closingElement</span><span class="token operator">:</span> JSXClosingElement <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> JSXIdentifier <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;a&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    JSXText <span class="token punctuation">{</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;bfe.dev&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),C=s("Obviously above AST follows the "),I={href:"https://facebook.github.io/jsx/",target:"_blank",rel:"noopener noreferrer"},A=s("JSX Spec"),O=s(":"),T=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token literal-property property">JSXElement</span><span class="token operator">:</span>
  JSXOpeningElement JSXChildren<span class="token operator">?</span> JSXClosingElement

<span class="token literal-property property">JSXOpeningElement</span><span class="token operator">:</span>
  <span class="token operator">&lt;</span> JSXElementName JSXAttributes<span class="token operator">?</span> <span class="token operator">&gt;</span>

<span class="token literal-property property">JSXChildren</span><span class="token operator">:</span>
  JSXChild JSXChildren<span class="token operator">?</span>

<span class="token literal-property property">JSXClosingElement</span><span class="token operator">:</span>
  <span class="token operator">&lt;</span> <span class="token operator">/</span> JSXElementName <span class="token operator">&gt;</span>

<span class="token literal-property property">JSXChild</span><span class="token operator">:</span>
  JSXText
  JSXElement
  <span class="token punctuation">{</span> JSXChildExpression<span class="token operator">?</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With the above AST, it is fairly easy to generate code, we only need to traverse the AST and insert <code>React.createElement</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token string">&quot; this is &quot;</span><span class="token punctuation">,</span>
  React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&quot;button&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),D=s("Also instead of React method, we could use "),N=n("code",null,"h()",-1),V=s(" defined in "),B={href:"https://bigfrontend.dev/problem/virtual-DOM-III-Functional-Component",target:"_blank",rel:"noopener noreferrer"},F=s("140. Virtual DOM III - Functional Component"),M=s(" instead."),R=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token string">&quot; this is &quot;</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&quot;button&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Now, please create your own parse() and generate() to transpile JSX Element code</strong>.</p><ol><li>please generate code which uses <code>h()</code>, <code>h()</code> is bundled with your code.</li><li>Goal of this problem is not to recreate the full parser, so only need to support the minumum spec below:</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token literal-property property">JSXElement</span><span class="token operator">:</span>
  JSXOpeningElement JSXChildren<span class="token operator">?</span> JSXClosingElement

<span class="token literal-property property">JSXOpeningElement</span><span class="token operator">:</span>
  <span class="token operator">&lt;</span> JSXElementName <span class="token operator">&gt;</span>

<span class="token literal-property property">JSXChildren</span><span class="token operator">:</span>
  JSXChild

<span class="token literal-property property">JSXClosingElement</span><span class="token operator">:</span>
  <span class="token operator">&lt;</span> <span class="token operator">/</span> JSXElementName <span class="token operator">&gt;</span>

<span class="token literal-property property">JSXChild</span><span class="token operator">:</span>
  JSXText
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),G=n("li",null,"you can choose not to follow the naming",-1),L=s("there is no newlines in the input, you can ignore "),W={href:"https://github.com/facebook/react/pull/480#issuecomment-31296039",target:"_blank",rel:"noopener noreferrer"},H=s("the whitespace rules"),K=n("li",null,"all input tags are smallcase HTML tags",-1),P=t(`<ol start="3"><li>for simplicity, the AST creating process with <code>parse()</code> won&#39;t be tested, rather <code>parse()</code> and <code>generate()</code> are tested together like this:</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;a&gt;bfe.dev&lt;/a&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;bfe.dev&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><p>An error should be thrown if code is not valid JSXElement, for example, the JSXOpeningElement and JSXClosingElement might not be matched.</p><blockquote><p>The test cases only cover some of the common errors.</p></blockquote></li></ol><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,4),Q=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("code"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"string"),s(`
 * `),n("span",{class:"token keyword"},"@returns"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("any"),n("span",{class:"token punctuation"},"}")]),s(` AST 
 */`)]),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"parse"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"code"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// your code here"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("any"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"your"),s(` AST
 * `),n("span",{class:"token keyword"},"@returns"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("string"),n("span",{class:"token punctuation"},"}")]),s(` 
 */`)]),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"generate"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"ast"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// your code here"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),U=n("pre",null,[n("code",null,`::: code-group-item typescript
`)],-1),Y=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},"JSXOpeningElement"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  tag`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},"JSXClosingElement"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  tag`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},"JSXChildren"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(`

`),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},"JSXElement"),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  openingElement`),n("span",{class:"token operator"},":"),s(` JSXOpeningElement
  children`),n("span",{class:"token operator"},":"),s(` JSXChildren
  closingElement`),n("span",{class:"token operator"},":"),s(` JSXClosingElement
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"parse"),n("span",{class:"token punctuation"},"("),s("code"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" JSXElement "),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// your code here"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"generate"),n("span",{class:"token punctuation"},"("),s("ast"),n("span",{class:"token operator"},":"),s(" JSXElement"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// your code here"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Z=n("p",null,":::",-1),z=t('<h2 id="related" tabindex="-1"><a class="header-anchor" href="#related" aria-hidden="true">#</a> Related</h2><ul><li><a href="./Virtual-DOM-I">Virtual DOM I</a></li><li><a href="./virtual-dom-II-createElement">Virtual DOM II - createElement</a></li><li><a href="./virtual-DOM-III-Functional-Component">Virtual DOM III - Functional Component</a></li><li><a href="./virtual-dom-v-jsx-2">Virtual DOM V - JSX 2</a></li></ul><h2 id="source" tabindex="-1"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2>',3),$={href:"https://bigfrontend.dev/problem/virtual-dom-iv-jsx-1",target:"_blank",rel:"noopener noreferrer"},nn=s("Source From");function sn(an,en){const e=o("ExternalLinkIcon"),l=o("CodeGroupItem"),i=o("CodeGroup");return d(),r(u,null,[m,v,n("p",null,[b,n("a",h,[g,a(e)]),_]),y,n("blockquote",null,[n("p",null,[f,n("a",S,[J,a(e)])])]),X,n("p",null,[q,n("a",w,[E,a(e)]),x]),j,n("p",null,[C,n("a",I,[A,a(e)]),O]),T,n("p",null,[D,N,V,n("a",B,[F,a(e)]),M]),R,n("ul",null,[G,n("li",null,[L,n("a",W,[H,a(e)])]),K]),P,a(i,null,{default:p(()=>[a(l,{title:"javascript",active:""},{default:p(()=>[Q]),_:1}),U,Y,Z]),_:1}),z,n("p",null,[n("a",$,[nn,a(e)])])],64)}var pn=c(k,[["render",sn],["__file","virtual-dom-iv-jsx-1.html.vue"]]);export{pn as default};
