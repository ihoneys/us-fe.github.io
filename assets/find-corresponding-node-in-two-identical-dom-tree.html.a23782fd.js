import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";import{r as o,c as d,b as a,w as t,a as e,F as p,e as s,d as n,o as u}from"./app.22a70bca.js";const h={},m=s('<h1 id="find-corresponding-node-in-two-identical-dom-tree" tabindex="-1"><a class="header-anchor" href="#find-corresponding-node-in-two-identical-dom-tree" aria-hidden="true">#</a> find corresponding node in two identical DOM tree</h1><h2 id="question" tabindex="-1"><a class="header-anchor" href="#question" aria-hidden="true">#</a> Question</h2><p>Given two same DOM tree <strong>A</strong>, <strong>B</strong>, and an Element <strong>a</strong> in <strong>A</strong>, find the corresponding Element <strong>b</strong> in <strong>B</strong>.</p><p>By <strong>corresponding</strong>, we mean <strong>a</strong> and <strong>b</strong> have the same relative position to their DOM tree root.</p><p><em>follow up</em></p><p>This could a problem on general Tree structure with only <code>children</code>.</p><p>Could you solve it recursively and iteratively?</p><p>Could you solve this problem with special DOM api for better performance?</p><p>What are the time cost for each solution?</p><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>',10),g=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token doc-comment comment"},[n(`/**
 * `),e("span",{class:"token keyword"},"@param"),n(),e("span",{class:"token class-name"},[e("span",{class:"token punctuation"},"{"),n("HTMLElement"),e("span",{class:"token punctuation"},"}")]),n(),e("span",{class:"token parameter"},"rootA"),n(`
 * `),e("span",{class:"token keyword"},"@param"),n(),e("span",{class:"token class-name"},[e("span",{class:"token punctuation"},"{"),n("HTMLElement"),e("span",{class:"token punctuation"},"}")]),n(),e("span",{class:"token parameter"},"rootB"),n(` - rootA and rootB are clone of each other
 * `),e("span",{class:"token keyword"},"@param"),n(),e("span",{class:"token class-name"},[e("span",{class:"token punctuation"},"{"),n("HTMLElement"),e("span",{class:"token punctuation"},"}")]),n(),e("span",{class:"token parameter"},"nodeA"),n(`
 */`)]),n(`
`),e("span",{class:"token keyword"},"const"),n(),e("span",{class:"token function-variable function"},"findCorrespondingNode"),n(),e("span",{class:"token operator"},"="),n(),e("span",{class:"token punctuation"},"("),e("span",{class:"token parameter"},[n("rootA"),e("span",{class:"token punctuation"},","),n(" rootB"),e("span",{class:"token punctuation"},","),n(" target")]),e("span",{class:"token punctuation"},")"),n(),e("span",{class:"token operator"},"=>"),n(),e("span",{class:"token punctuation"},"{"),n(`
  `),e("span",{class:"token comment"},"// your code here"),n(`
`),e("span",{class:"token punctuation"},"}"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),k=s('<h2 id="related" tabindex="-1"><a class="header-anchor" href="#related" aria-hidden="true">#</a> Related</h2><ul><li><a href="./get-DOM-tree-height">get DOM tree height</a></li></ul><h2 id="source" tabindex="-1"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2>',3),f={href:"https://bigfrontend.dev/problem/find-corresponding-node-in-two-identical-DOM-tree",target:"_blank",rel:"noopener noreferrer"},_=n("Source From");function v(b,w){const r=o("CodeGroupItem"),c=o("CodeGroup"),i=o("ExternalLinkIcon");return u(),d(p,null,[m,a(c,null,{default:t(()=>[a(r,{title:"javascript",active:""},{default:t(()=>[g]),_:1})]),_:1}),k,e("p",null,[e("a",f,[_,a(i)])])],64)}var C=l(h,[["render",v],["__file","find-corresponding-node-in-two-identical-dom-tree.html.vue"]]);export{C as default};
