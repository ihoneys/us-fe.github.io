import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";import{r as s,c as l,b as a,w as t,a as n,F as u,e as p,d as e,o as d}from"./app.22a70bca.js";const m={},k=p('<h1 id="first-bad-version" tabindex="-1"><a class="header-anchor" href="#first-bad-version" aria-hidden="true">#</a> first bad version</h1><h2 id="question" tabindex="-1"><a class="header-anchor" href="#question" aria-hidden="true">#</a> Question</h2><p>Say you have multiple versions of a program, write a program that will find and return the first bad revision given a <code>isBad(version)</code> function.</p><p>Versions after first bad version are supposed to be all bad versions.</p><p><em>notes</em></p><ol><li>Inputs are all non-negative integers</li><li>if none found, return -1</li></ol><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>',7),b=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},`/*
 type IsBad = (version: number) => boolean
 */`),e(`

`),n("span",{class:"token doc-comment comment"},[e(`/**
 * `),n("span",{class:"token keyword"},"@param"),e(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),e("IsBad"),n("span",{class:"token punctuation"},"}")]),e(),n("span",{class:"token parameter"},"isBad"),e(` 
 */`)]),e(`
`),n("span",{class:"token keyword"},"function"),e(),n("span",{class:"token function"},"firstBadVersion"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"isBad"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
	`),n("span",{class:"token comment"},"// firstBadVersion receive a check function isBad"),e(`
  `),n("span",{class:"token comment"},"// and should return a closure which accepts a version number(integer)"),e(`
  `),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"version"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token operator"},"=>"),e(),n("span",{class:"token punctuation"},"{"),e(`
    `),n("span",{class:"token comment"},"// write your code to return the first bad version"),e(`
    `),n("span",{class:"token comment"},"// if none found, return -1"),e(`
  `),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=n("pre",null,[n("code",null,`::: code-group-item typescript
`)],-1),h=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"type"),e(),n("span",{class:"token class-name"},"IsBad"),e(),n("span",{class:"token operator"},"="),e(),n("span",{class:"token punctuation"},"("),e("version"),n("span",{class:"token operator"},":"),e(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token operator"},"=>"),e(),n("span",{class:"token builtin"},"boolean"),e(`

`),n("span",{class:"token keyword"},"function"),e(),n("span",{class:"token function"},"firstBadVersion"),n("span",{class:"token punctuation"},"("),e("isBad"),n("span",{class:"token operator"},":"),e(" IsBad"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
	`),n("span",{class:"token comment"},"// firstBadVersion receive a check function isBad"),e(`
  `),n("span",{class:"token comment"},"// and should return a closure which accepts a version number(integer)"),e(`
  `),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token punctuation"},"("),e("version"),n("span",{class:"token operator"},":"),e(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),e(),n("span",{class:"token builtin"},"number"),e(),n("span",{class:"token operator"},"=>"),e(),n("span",{class:"token punctuation"},"{"),e(`
    `),n("span",{class:"token comment"},"// write your code to return the first bad version"),e(`
    `),n("span",{class:"token comment"},"// if none found, return -1"),e(`
  `),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=n("p",null,":::",-1),_=n("h2",{id:"source",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#source","aria-hidden":"true"},"#"),e(" Source")],-1),g={href:"https://bigfrontend.dev/problem/first-bad-version",target:"_blank",rel:"noopener noreferrer"},B=e("Source From");function y(w,x){const o=s("CodeGroupItem"),r=s("CodeGroup"),i=s("ExternalLinkIcon");return d(),l(u,null,[k,a(r,null,{default:t(()=>[a(o,{title:"javascript",active:""},{default:t(()=>[b]),_:1}),v,h,f]),_:1}),_,n("p",null,[n("a",g,[B,a(i)])])],64)}var C=c(m,[["render",y],["__file","first-bad-version.html.vue"]]);export{C as default};
