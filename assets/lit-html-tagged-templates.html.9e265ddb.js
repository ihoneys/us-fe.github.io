import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";import{r as a,c as i,a as n,b as t,w as o,F as r,d as e,e as u,o as d}from"./app.22a70bca.js";const m={},h=n("h1",{id:"lit-html-1-tagged-templates",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#lit-html-1-tagged-templates","aria-hidden":"true"},"#"),e(" lit-html 1 - tagged templates")],-1),k=n("h2",{id:"question",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#question","aria-hidden":"true"},"#"),e(" Question")],-1),v=e("According to "),_={href:"https://lit-html.polymer-project.org/",target:"_blank",rel:"noopener noreferrer"},g=e("lit-html homepage"),b=e(","),f=n("blockquote",null,[n("p",null,"lit-html lets you write HTML templates in JavaScript, then efficiently render and re-render those templates together with data to create and update DOM")],-1),w={href:"https://www.youtube.com/watch?v=ruql541T7gc&feature=emb_title",target:"_blank",rel:"noopener noreferrer"},y=e("This video"),x=e(" explains it pretty well about how it works. Let's take a look at the example."),T=u(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>html<span class="token punctuation">,</span> render<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;lit-html&#39;</span>
<span class="token keyword">const</span> <span class="token function-variable function">helloTemplate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> html<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>

<span class="token comment">// This renders &lt;div&gt;Hello Steve!&lt;/div&gt; to the document body</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token function">helloTemplate</span><span class="token punctuation">(</span><span class="token string">&#39;Steve&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span>body<span class="token punctuation">)</span>

<span class="token comment">// This updates to &lt;div&gt;Hello Kevin!&lt;/div&gt;, but only updates the \${name} part</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token function">helloTemplate</span><span class="token punctuation">(</span><span class="token string">&#39;Kevin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The magic happens in the second call of <code>render()</code> which only updates the necessary parts.</p><p>But there will be a series of problems on BFE.dev leading to that, here you are asked to :</p><p><strong>implement html() and render() to make above example work, without considering the rerender</strong>, so html() could just return the raw HTML string.</p><p>The input data are all valid.</p><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,6),j=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),e(),n("span",{class:"token function"},"html"),n("span",{class:"token punctuation"},"("),n("span",{class:"token doc-comment comment"},"/** your code here **/"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
  `),n("span",{class:"token comment"},"// your code here"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`


`),n("span",{class:"token comment"},"// render the result from html() into the container"),e(`
`),n("span",{class:"token keyword"},"function"),e(),n("span",{class:"token function"},"render"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[e("result"),n("span",{class:"token punctuation"},","),e(" container")]),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
  `),n("span",{class:"token comment"},"// your code here"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=n("h2",{id:"source",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#source","aria-hidden":"true"},"#"),e(" Source")],-1),H={href:"https://bigfrontend.dev/problem/lit-html-1-tagged-templates",target:"_blank",rel:"noopener noreferrer"},S=e("Source From");function B(L,q){const s=a("ExternalLinkIcon"),l=a("CodeGroupItem"),c=a("CodeGroup");return d(),i(r,null,[h,k,n("p",null,[v,n("a",_,[g,t(s)]),b]),f,n("p",null,[n("a",w,[y,t(s)]),x]),T,t(c,null,{default:o(()=>[t(l,{title:"javascript",active:""},{default:o(()=>[j]),_:1})]),_:1}),C,n("p",null,[n("a",H,[S,t(s)])])],64)}var G=p(m,[["render",B],["__file","lit-html-tagged-templates.html.vue"]]);export{G as default};
