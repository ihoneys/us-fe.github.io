import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";import{r as a,c as u,b as s,w as t,a as n,F as l,e as p,d as e,o as d}from"./app.22a70bca.js";const m={},h=p(`<h1 id="count-1-in-binary-form" tabindex="-1"><a class="header-anchor" href="#count-1-in-binary-form" aria-hidden="true">#</a> count &quot;1&quot; in binary form</h1><h2 id="question" tabindex="-1"><a class="header-anchor" href="#question" aria-hidden="true">#</a> Question</h2><p>Given an integer, count &quot;1&quot; in its binary form.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">countOne</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 1,  &quot;1&quot;</span>
<span class="token function">countOne</span><span class="token punctuation">(</span><span class="token number">257799</span><span class="token punctuation">)</span> <span class="token comment">// 12, &quot;111110111100000111&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>If you use built-in string methods in JavaScript, please do understand the time complexity, they are not free.</li><li>Actually this could be easily done by counting the digit one by one. Could you think of some other approaches?</li></ol><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,6),k=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[e(`/**
 * `),n("span",{class:"token keyword"},"@param"),e(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),e("number"),n("span",{class:"token punctuation"},"}")]),e(),n("span",{class:"token parameter"},"num"),e(` - integer
 * `),n("span",{class:"token keyword"},"@return"),e(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),e("number"),n("span",{class:"token punctuation"},"}")]),e(` count of 1 bit
 */`)]),e(`
`),n("span",{class:"token keyword"},"function"),e(),n("span",{class:"token function"},"countOne"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"num"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
  `),n("span",{class:"token comment"},"// your code here"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=n("h2",{id:"source",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#source","aria-hidden":"true"},"#"),e(" Source")],-1),_={href:"https://bigfrontend.dev/problem/how-many-1s-in-binary",target:"_blank",rel:"noopener noreferrer"},f=e("Source From");function v(y,g){const o=a("CodeGroupItem"),c=a("CodeGroup"),i=a("ExternalLinkIcon");return d(),u(l,null,[h,s(c,null,{default:t(()=>[s(o,{title:"javascript",active:""},{default:t(()=>[k]),_:1})]),_:1}),b,n("p",null,[n("a",_,[f,s(i)])])],64)}var w=r(m,[["render",v],["__file","how-many-1s-in-binary.html.vue"]]);export{w as default};
