import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";import{r as t,c as i,a as n,b as a,w as o,F as u,d as s,e as r,o as d}from"./app.22a70bca.js";const m={},b=n("h1",{id:"implement-observable-transformation-operators",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#implement-observable-transformation-operators","aria-hidden":"true"},"#"),s(" implement Observable Transformation Operators")],-1),k=n("h2",{id:"question",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#question","aria-hidden":"true"},"#"),s(" Question")],-1),v=s("This is a follow-up on "),h={href:"https://bigfrontend.dev/problem/create-an-Observable",target:"_blank",rel:"noopener noreferrer"},f=s("57. create an Observable"),_=s("."),g=s("There are "),O={href:"https://rxjs-dev.firebaseapp.com/guide/operators",target:"_blank",rel:"noopener noreferrer"},x=s("a lot of operators"),j=s(" for Observable, if we think of Observable as event stream, then modifying the stream is a common task, transformation operators are useful at this."),w=s("In this problem, you are asked to implement "),y={href:"https://rxjs-dev.firebaseapp.com/api/operators/map",target:"_blank",rel:"noopener noreferrer"},C=s("map()"),E=s(", as the name indicates, it maps the value to another value thus creating a new event stream."),I=r(`<p>Here is an example.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> source <span class="token operator">=</span> Observable<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token comment">// this transformer doubles numbers and create a new stream</span>
 <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span>
<span class="token comment">// 1</span>
<span class="token comment">// 4</span>
<span class="token comment">// 9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Observable has <code>pipe()</code> method which could make this more readable.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> source <span class="token operator">=</span> Observable<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

source<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span>
<span class="token comment">// 1</span>
<span class="token comment">// 4</span>
<span class="token comment">// 9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Note</strong> Observable is already given for you, no need to create it.</p><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,6),N=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("any"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"input"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"("),s("observable"),n("span",{class:"token operator"},":"),s(" Observable"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" Observable"),n("span",{class:"token punctuation"},"}")]),s(`
 * returns a function which trasnform Observable
 */`)]),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"transform"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// your code here"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=r('<h2 id="related" tabindex="-1"><a class="header-anchor" href="#related" aria-hidden="true">#</a> Related</h2><ul><li><a href="./create-an-Observable">create an Observable</a></li><li><a href="./implement-Observable-from">implement Observable.from()</a></li><li><a href="./implement-Observable-Subject">implement Observable Subject</a></li><li><a href="./implement-Observable-interval">implement Observable interval()</a></li><li><a href="./implement-Observable-fromEvent">implement Observable fromEvent()</a></li></ul><h2 id="source" tabindex="-1"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2>',3),T={href:"https://bigfrontend.dev/problem/implement-Observable-transformation-operators",target:"_blank",rel:"noopener noreferrer"},G=s("Source From");function V(B,F){const e=t("ExternalLinkIcon"),p=t("CodeGroupItem"),c=t("CodeGroup");return d(),i(u,null,[b,k,n("p",null,[v,n("a",h,[f,a(e)]),_]),n("p",null,[g,n("a",O,[x,a(e)]),j]),n("p",null,[w,n("a",y,[C,a(e)]),E]),I,a(c,null,{default:o(()=>[a(p,{title:"javascript",active:""},{default:o(()=>[N]),_:1})]),_:1}),S,n("p",null,[n("a",T,[G,a(e)])])],64)}var H=l(m,[["render",V],["__file","implement-observable-transformation-operators.html.vue"]]);export{H as default};
