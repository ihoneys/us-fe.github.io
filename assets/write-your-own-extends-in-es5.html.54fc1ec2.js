import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";import{r as t,c as u,a as n,b as a,w as o,F as r,d as s,e as p,o as d}from"./app.22a70bca.js";const k={},m=n("h1",{id:"write-your-own-extends-in-es5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#write-your-own-extends-in-es5","aria-hidden":"true"},"#"),s(" write your own "),n("code",null,"extends"),s(" in es5")],-1),v=n("h2",{id:"question",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#question","aria-hidden":"true"},"#"),s(" Question")],-1),b=s("I believe you've used "),h={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends",target:"_blank",rel:"noopener noreferrer"},y=s("extends"),_=s(" keyword in you JavaScript programs before."),f=p(`<p>Could you implement a <code>myExtends()</code> function in ES5 to mimic the behavior of <code>extends</code>?</p><p><code>myExtends()</code> takes a SubType and SuperType, and return a new type.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
<span class="token keyword">const</span> InheritedSubType <span class="token operator">=</span> <span class="token function">myExtends</span><span class="token punctuation">(</span>SuperType<span class="token punctuation">,</span> SubType<span class="token punctuation">)</span>

<span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InheritedSubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// above should work (almost) the same as follows</span>

<span class="token keyword">class</span> <span class="token class-name">SubType</span> <span class="token keyword">extends</span> <span class="token class-name">SuperType</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),w=s("To solve this problem, you need to fully understand what is "),S={href:"https://javascript.info/class-inheritance",target:"_blank",rel:"noopener noreferrer"},x=s("Inheritance"),g=p(`<p><em>note</em></p><p>Your code will be test against following SuperType and SubType</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
<span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>forSuper <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>from <span class="token operator">=</span> <span class="token string">&#39;super&#39;</span>
<span class="token punctuation">}</span>
<span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">superMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">method</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
SuperType<span class="token punctuation">.</span>staticSuper <span class="token operator">=</span> <span class="token string">&#39;staticSuper&#39;</span>

<span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>forSub <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>from <span class="token operator">=</span> <span class="token string">&#39;sub&#39;</span>
<span class="token punctuation">}</span>

<span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">subMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">method</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
SubType<span class="token punctuation">.</span>staticSub <span class="token operator">=</span> <span class="token string">&#39;staticSub&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,4),T=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"myExtends"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("SuperType"),n("span",{class:"token punctuation"},","),s(" SubType")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// your code here"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("h2",{id:"source",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#source","aria-hidden":"true"},"#"),s(" Source")],-1),E={href:"https://bigfrontend.dev/problem/write-your-own-extends-in-es5",target:"_blank",rel:"noopener noreferrer"},C=s("Source From");function I(G,N){const e=t("ExternalLinkIcon"),c=t("CodeGroupItem"),i=t("CodeGroup");return d(),u(r,null,[m,v,n("p",null,[b,n("a",h,[y,a(e)]),_]),f,n("p",null,[w,n("a",S,[x,a(e)])]),g,a(i,null,{default:o(()=>[a(c,{title:"javascript",active:""},{default:o(()=>[T]),_:1})]),_:1}),j,n("p",null,[n("a",E,[C,a(e)])])],64)}var F=l(k,[["render",I],["__file","write-your-own-extends-in-es5.html.vue"]]);export{F as default};
