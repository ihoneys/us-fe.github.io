import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";import{r as t,c as p,a as n,b as s,w as i,F as d,e as o,d as e,o as u}from"./app.22a70bca.js";const m={},h=o('<h1 id="integer-to-roman-numerals" tabindex="-1"><a class="header-anchor" href="#integer-to-roman-numerals" aria-hidden="true">#</a> integer to roman numerals</h1><h2 id="question" tabindex="-1"><a class="header-anchor" href="#question" aria-hidden="true">#</a> Question</h2><blockquote><p>This is reverse of <a href="/problem/roman-numerals-to-integer">133. roman numerals to integer</a></p></blockquote>',3),_={href:"https://en.wikipedia.org/wiki/Roman_numerals#Standard_form",target:"_blank",rel:"noopener noreferrer"},k=e("Roman numerals"),b=e(" are represented by combinations of following seven symbols, each with a fixed integer value."),v=o("<p>Symbol</p><p>I</p><p>V</p><p>X</p><p>L</p><p>C</p><p>D</p><p>M</p><p>Value</p><p>1</p><p>5</p><p>10</p><p>50</p><p>100</p><p>500</p><p>1000</p>",16),g=e("For "),f={href:"https://en.wikipedia.org/wiki/Roman_numerals#Standard_form",target:"_blank",rel:"noopener noreferrer"},I=e("Standard form"),w=e(", subtractive notation is used, meaning 4 is "),x=n("code",null,"IV",-1),y=e(" rather than "),C=n("code",null,"IIII",-1),R=e(", 9 is "),T=n("code",null,"IX",-1),S=e(" rather than "),X=n("code",null,"VIIII",-1),V=e(". Same rule applies to 40("),j=n("code",null,"XL",-1),M=e(") and 900("),q=n("code",null,"CM",-1),F=e(") .etc."),G=o(`<p>Simply speaking, the roman numerals in standard form follow these rules.</p><ol><li>symbols are listed from highest to lowest, from left to right</li><li>from left to right, if the next symbol value is bigger than current one, it means subtracting, otherwise adding.</li></ol><p>Please implement <code>integerToRoman()</code>. The input are all integers within valid range.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
<span class="token function">integerToRoman</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
<span class="token comment">// &#39;CXXIII&#39;</span>

<span class="token function">integerToRoman</span><span class="token punctuation">(</span><span class="token number">1999</span><span class="token punctuation">)</span>
<span class="token comment">// &#39;MCMXCIX&#39;</span>

<span class="token function">integerToRoman</span><span class="token punctuation">(</span><span class="token number">3420</span><span class="token punctuation">)</span>
<span class="token comment">// &#39;MMMCDXX&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2>`,5),L=n("div",{class:"language-javascript ext-js line-numbers-mode"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[e(`/**
 * `),n("span",{class:"token keyword"},"@param"),e(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),e("number"),n("span",{class:"token punctuation"},"}")]),e(),n("span",{class:"token parameter"},"integer"),e(`
 * `),n("span",{class:"token keyword"},"@returns"),e(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),e("string"),n("span",{class:"token punctuation"},"}")]),e(` str - roman numeral string
 */`)]),e(`
`),n("span",{class:"token keyword"},"function"),e(),n("span",{class:"token function"},"integerToRoman"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"num"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
  `),n("span",{class:"token comment"},"// your code here"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=n("pre",null,[n("code",null,`::: code-group-item typescript
`)],-1),B=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"function"),e(),n("span",{class:"token function"},"integerToRoman"),n("span",{class:"token punctuation"},"("),e("num"),n("span",{class:"token operator"},":"),e(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),e(),n("span",{class:"token builtin"},"string"),e(),n("span",{class:"token punctuation"},"{"),e(`
  `),n("span",{class:"token comment"},"// your code here"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=n("p",null,":::",-1),D=n("h2",{id:"source",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#source","aria-hidden":"true"},"#"),e(" Source")],-1),P={href:"https://bigfrontend.dev/problem/integer-to-roman",target:"_blank",rel:"noopener noreferrer"},Q=e("Source From");function z(A,H){const a=t("ExternalLinkIcon"),r=t("CodeGroupItem"),c=t("CodeGroup");return u(),p(d,null,[h,n("p",null,[n("a",_,[k,s(a)]),b]),v,n("p",null,[g,n("a",f,[I,s(a)]),w,x,y,C,R,T,S,X,V,j,M,q,F]),G,s(c,null,{default:i(()=>[s(r,{title:"javascript",active:""},{default:i(()=>[L]),_:1}),N,B,E]),_:1}),D,n("p",null,[n("a",P,[Q,s(a)])])],64)}var O=l(m,[["render",z],["__file","integer-to-roman.html.vue"]]);export{O as default};
